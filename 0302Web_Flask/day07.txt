1.关系映射
	1.一对多
	·在“多”表（实体类）中实现：
		实现外键关联
		外键属性=db.Column(db.TYPE，db.ForeignKey('主表.主键'))
	·在“一”表（实体类）中实现：
		实现关联属性 以及 反向引用	
		属性名=db.relationship('关联的实体类',backref="属性名",lazy='dynamic')
	2.一对一
		在任何一个表（实体）中实现：
			实现外键关联
			外键属性=db.Column(db.TYPE，db.ForeignKey('主表.主键'))		
		在另一个表（实体）中实现：
			实现关联属性 以及 反向引用
			属性名=db.relationship('关联的实体类',backref="属性名",uselist=False)
	3.多对多
		创建关联表
			对象名 = db.Table(
				"关联的表名",
				db.Column('id',db.Integer,primary_key=True),
				db.Column('外键列名1',db.TYPE,db.ForeignKey('主表1.主键')),
				db.Column('外键列名2',db.TYPE,db.ForeignKey('主表2.主键'))
			)
		在任何一个实体中实现：
			实现关联属性 以及 反向引用
			关联属性名 = db.relationship(
				'关联的实体类名',
				secondary='关联的第三张表表名',
				lazy='dynamic',
				backref=db.backref(
					'反向引用属性名',
					lazy='dynamic',
				)
			)
================================================================================
2.session & cookie
	1.cookie
		1.什么是cookie
			cookie 是一种数据存储技术，
			将一段文字保存在客户端（浏览器）的一种技术，并可以长时间保存
		2.cookie的使用场合
			1.记住密码（明文显示）
			2.记住搜索关键词
		3.在Flask中使用 cookie 
			1.使用 响应对象 保存cookie到客户端
				响应对象：（两种方法：）
					1. resp = make_response('响应字符串')
					2. resp = redirect('地址')
				响应对象.set_cookie(key, value,max_age)
					key:保存的cookie的名称
					value:保存的cookie的值
					max_age:最大保存时间，超过时间则不能取出，以秒s为单位的数字
			2.获取 cookie 的数据
				每次向服务器发送请求时，都会把cookie中的数据封装到request中带到服务器
				request.cookies
					request.cookies['key']
					request.cookies.get('key')
	2.session
		1.什么是session
			session - 回话
			session 是保存在服务器，为每个浏览器所开辟的一段空间
		2.session 在 Flask 中的实现
			1.配置：SECRET-KEY
				app.config['SECRET_KEY']="YOUR GUESS"
			2.使用 session (存储的是字符串)
				from flask import session 
				1.向session 中保存数据
					session['key'] = value
				2.从session 中获取数据
					value = session['key']
				3.从session 中删除数据
					del session['key']
			3.session 与 cookie 的异同
				相同：都能够保存数据
				不同点：
					1.保存地方不同
						session：保存在服务器上
						cookie：保存在浏览器上
					2.保存的时长不同
						session：临时性保存数据
						cookie：可以永久性保存
					3.安全性问题
						session：安全级别较高
						cookie：安全级别较低
					


