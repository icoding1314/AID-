1.模板
  1.加载方式
    1.loader
    2.render
  2.语法
    1.变量
      return render(request,'xx.html',{})
      模板中：{{变量}}
    2.标签
      1.{% for %} ... {% endfor %}
      2.{% if %} ... {% endif %}
      3.{% comment %} ... {% comment %}
      4.{% static '' %}
      5.{% load static %}
    3.过滤器
      {{变量|过滤器}}

      {{value|upper}}
      {{value|lower}}
      {{value|add:num}}
      {{value|floatformat:n}}
      {{value|truncatechars:n}}
  3.静态文件
    在 settings.py 中设置变量
    1.设置静态文件的访问路径
      STATIC_URL = '/static/'
    2.设置静态文件的存储路径
      STATICFILES_DIRS = (os.path.join(BASE_DIR,'static'),)
        1.项目的根目录处创建一个 static 目录
        2.每个应用下创建一个 static 目录
1.模板的继承
  1.父模板
    {% block 名称 %}
    {% endblock %}
  2.子模板
    1.指定继承模板
      {% extends '父模板名称' %}
    2.编写要覆盖的内容
      {% block 名称 %}
      {% endblock %}
2.url() 的name属性 - 反向解析
  1.为 url 的name属性赋值
    url(r'',views,name='名称')
    1.模板中反向解析
      {% url 'name值' '参数1' '参数3' %}
    2.视图中反向解析
      url=reverse('name值',args=('参数1','参数2'))
3.创建模型
  class ClassName(models.Model):
    属性名=models.字段类型(字段选项)

    字段类型：
      1.CharField(max_length=50)
      2.IntegerField()
      3.FloatField()
      4.DecimalField(max_digits=7,decimal_places=2)
      5.EmailField()
      6.URLField()
      7.ImageField()
      8.DateField()
      9.DateTimeField()
      10.BooleanField()
    字段选项：
      1.default
      2.null
      3.db_column
4.相关指令
  1.版本切换
    ./manage.py migrate 应用名称 版本号
  2.通过数据库自动导出models类
    ./manage.py inspectdb > 文件名.py
========================================================

1.增加数据
  1.Entry.objects.create(属性=值)
    返回值：创建好的实体对象
  2.创建实体对象，通过save()完成保存
    obj = Entry(属性=值)
    obj.save()
  3.通过字典构建实体对象，通过save()完成保存
    dic = {
      '属性':'值',
    }

    obj = Entry(**dic)
    obj.save()
2.查询数据
  所有的查询操作都要基于 Entry.objects
  1.all()
    将每个实体对象保存在列表中进行返回
  2.values('列1',...)
    将每个实体对象转换成字典再保存在列表中进行返回
  3.values_list('列1',...)
    将每个实体对象转换成元组再保存在列表中进行返回
  4.get(条件)
    查询只返回一条数据
  5.filter(条件)
    1.构建等值条件
      Entry.objects.filter(id=1)
    2.构建不等值条件
      使用 查询谓词(Field Lookups)
      __gt,__gte,__lt,__lte,__contains,__startswith
      __endswith,__in,__range,__exact,__date,__month

      Entry.objects.filter(id__gt=5)
  6.exclude(条件)
    实现不等值条件判断
  7.order_by('列','列')
    排序，默认是升序，降序的话则在列前加 "-"
  8.aggregate()
    不带分组，整表做聚合
    Entry.objects.aggregate(名=聚合函数('列'))
    聚合函数：
      Avg(),Sum(),Count(),Max(),Min()
  9.annotate()
    带分组的聚合
    Entry.objects.filter(条件).values('分组列').annotate(名=聚合函数('列')).filter(条件)
3.修改数据
  1.修改单条数据
    1.查
      obj=Entry.objects.get()
    2.改
      obj.xxx = xxx
    3.保存
      obj.save()
  2.修改多条数据
    调用QuerySet的update()实现批量修改

    Entry.objects.filter(id=1).update(name='xxx')
4.删除数据
  调用实体对象/QuerySet的 delete() 完成删除
================================================

1.F 和 Q
  1.F()
    Author.objects.all().update(age=F('age')+10)
  2.Q()
    Q() | Q()
    Author.objects.filter(Q(id=1)|Q(age__gte=35))
2.原生方法
  1.查询 - raw()
    Entry.objects.raw(sql)
  2.增删改
    with connection.cursor() as cursor:
      cursor.execute(sql)
3.使用后台管理Models
  1.基本管理
    1. def __str__(self):
    2. 内部类 - Meta
      1.db_table
      2.verbose_name
      3.verbose_name_plural
      4.ordering = []
    3.verbose_name
      name=model.CharField(max_length="",verbose_name)

  2.高级管理
    1.高级管理类
      继承自 admin.ModelAdmin
      注册高级管理类 : admin.site.register(Entry,EntryAdmin)
    2.高级管理属性
      1.list_display
      2.list_display_links
      3.list_editable
      4.search_fields
      5.list_filter
      6.date_hierarchy
      7.fields
      8.fieldsets
        fieldsets = (
          ("组名",{
            "fields":("属性1","属性2"),
            "classes":('collapse',)
          }),
        )
4.关系映射
  1.一对一
    1.设置一对一
      任何一个实体中：
       属性 = models.OneToOneField(Entry)
    2.反向引用
      属性 ：对应的实体类名全小写
  2.一对多
    1.设置一对多
      多的实体中增加对一的引用
      属性 = models.ForeignKey(Entry)
    2.反向引用
      属性 ：类名全小写_set
  3.多对多
    1.设置多对多
      任何一个类中
      属性 = models.ManyToManyField(Entry)
    2.反向引用
      属性 ：类名全小写_set
=======================================================
1.自定义查询对象
  1.声明类 继承自 models.Manager
    定义自定义函数
  2.为实体类覆盖 objects
    class Entry(models.Model):
      objects = EntryManager()
2.HttpRequest
  1.判断请求方式
    request.method
  2.获取请求提交的数据
    1.get
      request.GET['name']
    2.post
      request.POST['name']
  3.获取请求消息头
    request.META
    request.META.HTTP_REFERER
  4.提交post请求
    Django对post请求需要进行一个 csrf 验证
    解决方案：
      1.增加 {% csrf_token %} 标签
      2.删除 csrf 相关的中间件
      3.将 @csrf_protect 添加到视图处理函数上
3.使用 forms 模块
  1.使用 forms 模块
    1.创建 forms.py
    2.导入 forms 模块
      from django import forms
    3.创建 class,一个class对应着一个表单
      class ClassName(forms.Form):
        属性 ：每一个属性会生成一个表单控件

        forms.CharField()
        forms.EmailField()
        forms.IntegerField()
        ... ...
  2.在模板中 解析 form 对象
    0.注意
      1.创建表单 - <form></form>
      2.自定义按钮
    1.手动解析
      form = XXXForm()
      return render(request,'xxx.html',locals())

      xxx.html :
        {% for field in form %}
          {{field}} : 表示的是一个控件
          {{field.label}} : 表示的是label参数值
        {% endfor %}
    2.自动解析
      {{form.as_p}}
      {{form.as_ul}}
      {{form.as_table}}
  3.视图中通过 forms.Form 接收表单数据
    1.通过 forms.Form的构造器接收数据
      form = XXXForm(request.POST)
    2.需要让 form 通过验证后 ，再取值
      form.is_valid()
        True:通过所有验证
        False:未通过验证
    3.获取表单数据
      form.cleaned_data
  4.forms模块的高级处理
    将 Models 和 Forms 结合到一起使用
    1.在 forms.py 中创建 class，继承自 forms.ModelForm
    2.创建内部类 Meta ， 去关联 Model
      1.model : 指定要关联的实体类
      2.fields : 指定从Model中取哪些字段生成控件
        1.取值 "__all__",表示全部属性都要生成控件
        2.取值 列表，声明允许生成控件的属性名
      3.labels : 指定每个属性所关联的label，取值为字典
        labels = {
          '属性名':'label文本',
          '属性名':'label文本',
        }
  5.内置小部件
    1.什么是小部件
      小部件(widget)，表示的是生成到页面上的控件的类型以及其他的html属性
    2.常用小部件类型
      1.TextInput : type="text"
      2.PasswordInput : type="password"
      3.NumberInput : type="number"
      4.EmailInput : type="email"
      5.URLInput : type="url"
      6.HiddenInput : type="hidden"
      7.CheckboxInput : type="checkbox"
      8.Textarea : <textarea></textarea>
      9.Select : <select></select>
    3.小部件的使用
      1.继承自 forms.Form
        1.基本版
          只指定控件的类型
          class RemarkForm(forms.Form):
            属性 = forms.CharField(
              label='文本',
              widget=forms.小部件类型
            )
        2.高级版
          指定控件类型的基础上还允许设置html的一些相关属性

          属性 = forms.CharField(
            label='文本',
            widget=forms.小部件类型(
              attrs = {
                'html属性名':'属性值',
                'html属性名':'属性值',
              }
            )
          )
      2.继承自 forms.ModelForm
        class XXXForm(forms.ModelForm):
          class Meta:
            model = User
            fields = "__all__"
            labels = {
              '属性1':'Label1',
            }
            widgets = {
              '属性1':forms.小部件类型(attrs={})
            }
2.cookies 在 Django 中的实现
  1.django 中使用 cookies
    1.设置cookies的值
      语法：
        响应对象.set_cookie(key,value,expires)
          key:cookie的名字
          value:cookie的值
          expires:保存时间，以s为单位
        ex:
          响应对象.set_cookie('uname','tom',60*60*24*365)
      响应对象:
        1.HttpResponse
          resp = HttpResponse("给客户端的一句话")
          resp.set_cookie('key','value',expires)
          return resp
        2.render()
          resp = render(request,'xxx.html',locals())
          resp.set_cookie('key','value',expires)
          return resp
        3.HttpResponseRedirect / redirect
          resp = redirect('/地址/')
          resp.set_cookie('key','value',expires)
          return resp
    2.获取cookies的值
      通过 request.COOKIES 获取当前站点下所有的cookies的信息
      request.COOKIES:{'username': 'Wang Wc'}
3.session 在 Django 中的实现
  1.设置 session 的值
    request.session['key'] = value
  2.获取 session 的值
    value = request.session[key]
    value = request.session.get('key')
  3.删除 session 的值
    del request.session['key']

  4.在 settings.py中，设置session的相关设置
    1.SESSION_COOKIE_AGE
      作用：设置 sessionID在cookies中的保存时间
      ex:
        SESSION_COOKIE_AGE = 60*60*24
    2.SESSION_EXPIRE_AT_BROWSER_CLOSE
      作用：设置关闭浏览器时则清空服务器上对应的session空间
      ex:
        SESSION_EXPIRE_AT_BROWSER_CLOSE = True


