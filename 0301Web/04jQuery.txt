一 jQuery
	1. 介绍
			jQuery是一个JavaScript的库，通过封装
			原生的JavaScript，得到一整套定义好的方法，
			简化JS操作
			Write Less ，Do More
			jQuery版本 ：
				 jQuery 1.xx.x 版本，兼容IE 6,7,8
				 jQuery 2.xx.x 版本，不再兼容IE 6,7,8
	2. jQuery的功能和优势
			1. 简化DOM操作，像操作CSS一样去操作DOM
			2. 直接通过选择器设置元素样式
			3. 简化JS的代码操作 （链式调用）
			4. 事件的处理更加容易
			-------------------------
			5. 各种动画效果使用更加方便
			6. 让Ajax技术更完美
			7. 基于jQuery有大量方便的插件
			8. 自行扩展功能插件
	3. jQuery使用
		1. 引入jQuery文件
				1. 本地文件引入
					<script src=""></script>
				2. 网络文件引入
					<script src="url"></script>
				注意 ：如果想使用jQuery语法操作JS，必须将jQuery
				引入放在JS代码之前
		2. jQuery 使用
				1. jQuery 对象 - jQuery/$
						jQuery对象是对DOM对象封装之后产生的对象
						jQuery对象只能操作jQuery提供的方法，DOM对象也
						只能操作原生JS提供的方法，不能混用
				2. 工厂函数 - $()
						如果想要获取元素对象，必须通过工厂函数
						函数中可以传递参数 ：选择器/DOM对象
				3. jQuery对象与DOM对象互相转换
						1. DOM 转换为 jQuery 对象
							var h1 = document.getElementsByTagName('h1')[0];
							var $h1 = $(h1);
						2. jQuery 转换为 DOM
							var h1 = $h1[0];
							var h1 = $h1.get(0);
jQuery选择器
	1. 作用 
		根据选择器获取页面中的元素，返回值都是
		由jQuery对象组成的数组
	2. 语法 ：
		$('选择器')
	3. 常用选择器
		1. 基础选择器
				1. ID选择器
						$('#id');
						返回id属性值为指定id的元素对象
				2. 类选择器
						$(".className");
						返回指定类名对象的元素
				3. 标签选择器
						$('element');
						返回指定标签名对应的元素
				4. 群组选择器
						$('selector1,selector2,...');
		2. 层级选择器
				1. 后代选择器
						$('selector1 selector2')
				2. 子代选择器
						$('selector1>selector2')
				3. 相邻兄弟选择器
						$('selector1+selector2')
						匹配紧跟在selector1后满足selector2的元素
						h1+p
				4. 通用兄弟选择器
						$('selector1~selector2')
						匹配selector1后所有满足selector2的元素
		3. 基本过滤选择器
				过滤选择器需要结合其他选择器一起使用
				1. :first
						只匹配一组元素中的第一个元素
						$('p:first')
				2. :last
						匹配一组元素中的最后一个元素
						$('p:last')
				3. :not
						否定筛选，将满足selector选择器的元素都排除在外
						匹配剩余元素
						$(':not(p,h1)')
				4. :odd
						匹配偶数行对应的元素 （奇数下标）
				5. :even
						匹配奇数行对应的元素
				6. :eq(index)
						匹配下标等于index的元素
				7. :gt(index)
						匹配下标大于index的元素
				8. :lt(index)
						匹配下标小于index的元素
		4. 属性选择器 []
				根据标签属性匹配元素
				1. [attribute]
						匹配包含指定属性的元素
				2. [attribute=value]
						匹配属性attribute=value的元素
				3. [attribute!=value]
						匹配attribute属性值不等于value的元素
				4. [attribute^=value]
						匹配属性值以value字符开头的元素
				5. [attribute$=value]
						匹配属性值以value字符结尾的元素
				6. [attribute*=value]
						匹配属性值中包含value字符的元素
		5. 子元素过滤选择器
				1. :first-child
						匹配属于其父元素中的首个子元素
				2. :last-child
						匹配属于其父元素中的最后一个子元素
				3. :nth-child(n)
						匹配属于其父元素中的第n个子元素
				注意 ：
					将要匹配的子元素与筛选选择器相结合使用

jQuery操作DOM
	1. 基本操作
		1. html()
				获取或者设置jQuery对象中的html内容
				类似于DOM innerHTML，可识别标签
		2. text()
				获取或者设置jQuery对象中的text内容
				类似于innerText
		3. val()
				获取或者设置jQuery对象value值（常见表单控件）
				练习 ：
					1. 创建文本框，定义id
					2. 创建按钮，内容为“显示”
					3. 创建 div,当按钮被点击时，将文本框中的内容
					以一级标题的形式显示在div中
					4. 使用jQuery实现
		4. 属性操作
				1. attr()
						读取或设置jQuery对象属性值
						参数为字符串形式的属性名
						et :
							console.log($('div').attr('id'));
							$('div').attr('class','d1');
				2. removeAttr()
						移除指定的属性，参数为属性名
						et :
							$('div').removeAttr('id');

	2. 样式操作
			1. attr();
					添加id或class属性，对应选择器，为元素添加样式
			2. addClass('className')
					将className作为值添加到元素的class属性上
				  是可以连缀调用的
					$('h1').addClass('c1').addClass('c2')...
			3. removeClass('className');
					移除className
					参数可以省略，表示清空类选择器
			4. toggleClass('className')
					切换样式 :
						元素如果具备className对应的样式，则删除
						如果没有，就添加

jQuery样式操作
			1. attr();
					添加id或class属性，对应选择器，为元素添加样式
			2. addClass('className')
					将className作为值添加到元素的class属性上
				  是可以连缀调用的
					$('h1').addClass('c1').addClass('c2')...
			3. removeClass('className');
					移除className
					参数可以省略，表示清空类选择器
			4. toggleClass('className')
					切换样式 :
						元素如果具备className对应的样式，则删除
						如果没有，就添加
			5. css('')
					获取元素样式属性的值
					et ：
						$('div').css('width');
			6. css('','')
					设置元素的样式
					et :
						$('div').css('width','200px');
			7. css(JSON对象)
					设置元素样式，参数为一组CSS属性
					JSON对象 ：是一种约束了格式的对象表现形式
					JSON ：JavaScript Object Notation
					JSON对象的表示方式：
						1. JSON对象必须使用{}括起来
						2. 使用键值对来声明数据（属性与值）
						3. 所有的属性在声明时必须使用字符串形式"",
								属性值如果也是字符串，也必须使用""
						4. 属性与值之间使用:连接
						5. 多对属性和值之间使用,隔开
					et :
						$('div').css({
							'width':'200px',
							'height':'200px',
							...
						});

jQuery操作节点
	1. children() / children('selector')
			获取某个jQuery对象下所有的子元素，或者获取带有
			指定选择器的子元素
			注意 ：只考虑直接子元素，不考虑间接后代元素
	2. next() / next('selector')
			获取某jQuery对象的下一个兄弟元素 / 满足selector的
			下一个兄弟元素
	3. prev() / prev('selector')
			获取某jQuery对象的上一个兄弟元素 / 满足selector的
			上一个兄弟元素
	4. siblings() / siblings('selector')
			获取某jQuery对象的所有兄弟元素 / 满足selector的
			兄弟元素
	5. find('selector')
			获取满足selector的所有后代元素
	6. parent()
			获取jQuery对象的父元素

jQuery创建对象
	1. $('标签')
			参数为要创建的标签，使用HTML标签语法
			et :
				var $div = $("<div></div>");
				$div.html('动态创建的div');
				$div.attr('id','box');
				$div.css('color','red');
			et2 :
				var $div2 = $("<div id='box' style='color:red;'>
				动态创建的div</div>");

jQuery 插入元素
	1. 内部插入
		 将创建好的元素作为子元素插入到网页中
		 $obj.append($new)
				将新创建的元素作为最后一个子元素添加
		 $obj.prepend($new)
				将创建好的元素作为第一个子元素添加
	2. 作为兄弟元素插入
		 $obj.after($new)
				将新元素作为$obj的下一个兄弟元素添加进来
		 $obj.before($new)
				将新元素作为$obj的上一个兄弟元素添加进来

jQuery 删除元素
	语法 ：$obj.remove()
	作用 ：将$obj移除掉

jQuery 事件处理
	1. 页面加载完成之后再执行
			语法 ：
				1. $(document).ready(function (){
							//加载完成之后执行的操作
					});
				2. $().ready(function (){
							//加载完成之后执行的操作
					});
				3. $(function (){
						//加载完成之后执行的操作
					});
			与原生onload事件的区别 ：
				1. 原生onload事件不能多次使用，后面的会把前面的
				覆盖掉，只执行最后书写的onload
					jquery中的ready方法，也表示文档加载完毕，
						可以使用多次，所有的相关函数都会被执行，不会
						被覆盖
				2. 原生onload事件，等待页面中DOM节点及所有页面资源
						全部加载完成才执行
						jquery中的ready方法，只等待DOM树加载完成就执行
						相关函数

	2. jquery事件绑定
		1. 方式1
				$obj.bind('事件名称'，function(){
						//事件处理函数
				});
				注意 ：
					事件名称省略on前缀
		2. 方式2
				$obj.事件名称(function (){
						//事件处理
				});
				注意 ：
					事件名称省略on前缀

	3. jquery 事件对象
		在绑定事件时，允许传递参数表示事件对象
		$obj.bind('click',function (event){
				console.log(event);
		});
		事件对象的使用方法，与原生的一致
		event.target
		event.offsetX


			


			

		



	
	