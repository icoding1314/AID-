python 的核心数据类型
  数字(整型数int,浮点型数float，复数complex， 布尔型bool)
  字符串 str, 列表 list 等

整型数 int
  整数是不带有小数部分的数字

  整数 的字面值表示方式
    十进制表示方式
      如:
        10
        200
        -100
        99999999999999999999999999
    八进制表示方式
      如:
        0o177  (127)
        0o11   (9)
    十六进制表示方式:
      如:
        0x11  (17)
        0xFF  (255)
        0x1a2b 
    二进制表示方式:
      如:
        0b111
        0b101

进制:
  二进制 逢二进一 (0~1)
  八进制 逢八进一 (0~7)
  十进制 逢十进一 (0~9)
  十六进制 逢十六进一 (0~9,A-F, a-f)

浮点型数 float
  浮点数是带有小数部分的数字(小数部分可以是0)

  浮点数的字面值表示方式:
    小数表示法:
      如:
        3.14  3.1  3.0  3.  0.14  .14
    科学计数法:
      格式:
        小数 e/E (正负号) 指数
      如:
        6.18E-1  （等同于 0.618)
        2.9979e8  等于299790000.0


复数 complex
  分为两部分:
    实部(real)
    虚部(image)
  虚部是以j或J结尾的数

  字面值:
    1j
    (2J)
    1+2J
    3-4j

布尔型数 bool
  用来表求真和假两种状态的数字
    True 表示值(条件满足或成立)
    False 表示假(条件不满足或不成立)
  说明:
    True 的值为1
    False 的值为0


内置对象
  空值 None
    None 是一个表示不存的特殊对象
  作用:
    用来占位
    变量解除绑定


表达式和运算符
表达式 expression
  由一个数字 或 数字和运算符 等组成

  作用:
    通常让计算做一些事情并返回结果
  如:
    1 + 2
    1 + 2 * 3 + 4 / 5


运算符:
  算术运算符:
    +  加法
    -  减法
    *  乘法
    /  除法
    // 地板除floordiv
    %  求余
    ** 幂运算
  / 除法
    除法得到的数是浮点型数，不会丢弃小数部分
    1 / 3  # 得 0.333333333333
    8 / 2  # 得 4.0

  // 地板除
    除的结果云掉小数部分向下取整
    如:
      7 / 3        # 得 2.333333333333
      7 // 3       # 得 2
      3.25 // 1.5  # 得 2.0
  % 求余
    如:
      7 % 3       # 得 1
      3.25 % 1.5  # 得 0.25
  ** 幂运算
    格式:
      x ** y
      意为 x的y次方
    如:
      4 ** 2  # 得 16
      3 ** 4.0  # 得 81.0
运算符的优先级
  **
  * / // %
  + -
示例:
  1 + 3 * 3 ** 2 + 4 // 2
  1 + 3 * 9 + 4 // 2
  1 + 27 + 4 // 2
  1 + 27 + 2
  28 + 2
  30

括号分组子表达式:
  ()内部的表达式先进行计算

混合类型自动升级
  1 + 2.14 返回类型为浮点型 3.14
  3 + 4.0  返回 7.0

基本输出函数 print
  格式:
    print(要打印的东西)

  多个数据用逗号分隔开
变量 variable
  什么是变量
    变量是关联一个对象的"标识符"

标识符的命名规则:
  必须为字母或下划线开头，后跟字母或下划线或数字
  不能使用python的关键字

  说明:
    python的变量名区分大小写
  合法的标识符（变量名) 举例 ：
    abc  a1b2 _abc  __Abcd  var  
  不合法的标识符:
    1a2b  $ABC  +a  -b  #ABC @ ABC
  python关键字:
    True, False, None, is, del, if, elif ...等

赋值语句
  = 
  语法:
    变量名 = 表达式
    或
    变量名1 = 变量名2 = 表达式
    或
    变量名1, 变量名2 = 序列
  作用:
    1. 创建一个变量，此变量用来绑定数据对象
    2. 修改一个变量的绑定关系，让其绑定另一个数据对象

  说明:
    当变量不存在时，创建该变量，同时将变量绑定在这个对象上
    当变量存在时，改变此变量绑定的对象
    一个变量只能绑定一个对象
    两个变量可以同时绑定同一个对象
  示例:
    pi = 3.1415926
    pi2 = pi  # pi变量 和 pi2 变量同时绑定 3.1415926
    x = y = 100  # x变量和 y变量同时绑定 100
    x, y = 100, 200  # 序列赋值

python 中的自动化内存管理
  a = 10000
  b = 20000
  a = a + b  # 释放10000这个对象，a重新绑定30000
  c = a   # c同时绑定在30000上
del 语句:
  作用:
    用于删除变量，同时解除与对象的关联关系，如果可能能释放对象
  语法:
    del 变量名

  在交互模式下查看当前作用域的所有变量
  >>> help('__main__')
  退出键: q

  示例:
    a = 10000  # 创建a变量，绑定10000
    print(a)  # 10000
    del a   # 删除了a变量,释放10000这个数据对象
    print(a)  # 出错

自动化内存管理和引用计数:
  每个对象都会记录有几个变量绑定（引用）自身，当引用的数量为0时，则此对象将被销毁（释放内存资源),  此种自动化内存管理的方式叫引用计数

  例:
    a = 10000
    b = a  # 两个变量同时绑定10000这个数据对象
    del a
    del b  # 此时会释放10000这个数据对象


is / is not 运算符
  作用:
    判断两个对象是否是同一个对象,当是同一对象时返回True,否则返回False

  说明:
    is not 返回值与is 相反
  语法:
    x is y
    x is not y

id(obj) 函数  
  作用:
    返回一个对象在内存中的地址

小整数对象池
  CPython中，整数-5至256的数永远存在于小整数池中，不会释放且可重复使用
  (id 值相差32，以下列表中的值相差-128
  [258, 262, 266, 270, 274, 278, 282, 286, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 463, 464, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498]
  )
  示例:
    a = 100
    b = 100
    a is b # True

    a = 1
    def change_integer(a):
        a = a + 1
        return a
    print change_integer(a)
    print a
    #===(Python中 "#" 后面跟的内容是注释，不执行 )
    b = [1,2,3]
    def change_list(b):
        b[0] = b[0] + 1
        return b
    print change_list(b)
    print b  
  第一个例子，我们将一个整数变量传递给函数，函数对它进行操作，但原整数变量a不发生变化。
  第二个例子，我们将一个表传递给函数，函数进行操作，原来的表b发生变化。
  对于基本数据类型的变量，变量传递给函数后，函数会在内存中复制一个新的变量，从而不影响原来的变量。（我们称此为值传递）
  但是对于表来说，表传递给函数的是一个指针，指针指向序列在内存中的位置，在函数中对表的操作将在原有内存中进行，从而影响原有变量。 （我们称此为指针传递）

 


复合赋值算术运算符
  运算符         说明
  y += x     等同于 y = y + x
  y -= x     等同于 y = y - x
  y *= x     等同于 y = y * x
  y /= x     等同于 y = y / x
  y //= x    等同于 y = y // x
  y %= x     等同于 y = y % x
  y **= x    等同于 y = y ** x

  例:
    x = 100
    x *= 2  # x = 200
    x = 100
    x = x * 2  # x = 200
比较运算符
  运算符:
    <   小于
    <=  小于等于
    >   大于
    >=  大于等于
    ==  等于
    !=  不等于
  语法:
    左表达式 < 右表达式
  说明:
    比较运算返回布尔类型的值
  例:
    20 < 100       # True
    300 >= 20      # True
    1 == 2         # False
    x = 70
    y = 70
    x != y         # False
    0 <= x <= 100  # True


数值对象的构造(创建)函数
  float(obj)    用字符串或数字转换为浮点数，如果不给出实参，则返回0.0
  int(x=0, base=10)  用数字或字符串转换为整数，如果不给出实参则返回0
  complex(r=0.0, i=0.0)  用数字创建一个复数
  bool(x)   用x创建一个布尔值(True/False)

函数调用表达式
  函数名(传参列表)
  说明:
    函数调用是表达式，此表达式一定会返回一个对象的引用关系。如果不需要返回值时，通常返回None对象的引用关系

bool(obj) 返回假值的情况:
  None  空值
  Flase 假值
  0, 0.0, 0j  所有的数字零
  -----以下后面会讲-------
  ''   空字符串
  []   空列表
  {}   空字典
  ()   空元组
  ...
内建数值型函数
  abs(x)  取x的绝对值
  round(number, ndigits=0)  对数值进行'四舍五入',ndigits是小数向右取整的位数，负数表示向左取整
  pow(x, y, z=None)  相当于 x ** y 或 x ** y % z

help() 函数查看帮助
  help(函数名或对象名)
  >>> help(abs)



语句 statements
  语句由一些表达式组成,通常一条语句可以独立执行来完成一部分事情并形成结果
    python建议一条语句写在一行内
    多条语句写在一行内需要用分号(;) 分开
  示例:
    print("hello")
    x = 100 + 200
    print(x)
    # 写在一行内为:
    print("hello"); x = 100 + 200; print(x)

显式换行:
  折行符 \ (读作反斜杠)
    折行符必须放在一行的末尾，来示意解释执行器下一行也是本行的语句
  示例见:
    statements.py

隐式折行
  所有的括号的内容换行，称为隐式换行
  括号包括()  []  {}

基本输入函数 input
  作用:
    从标准输入设备上读取一个字符串（末尾的换行符会被删除)
  格式：
    input('提示字符串') 
  说明:
    返回输入的字符串(仅python3)
    提示字符串可以为空
  示例见:
    input.py

基本输出函数 print
  作用:
    将一系列的值以字符形式输出到标准输出设备上，默认为终端
  格式:
    print(value, .... sep=' ', end='\n', file=sys.stdout, flush=False)
  选项的关键字参数:
    sep: 两个值之间的分隔符， 默认为一个空格' '
    end: 输出完毕后在末尾自动追加一个字符串，默认为换行符'\n'
  示例见:
    print.py
问题:
  请输入一个整数:
    print("这个数是奇数")
    print("这个数是偶数")

if 语句:
  作用:
    让程序根据条件选择性的执行某条语句或某些语句
  语法:
    if 真值表达式1:
        语句块1
    elif 真值表达式2:
        语句块2
    elif 真值表达式3:
        语句块3
    ...
    else:
        语句块
  说明:
    elif 可以有0个，1个或多个
    else 可以有0个或1个

  示例见:
    if.py
    if2.py
if 语句的真值表达式
  if 100:
     print('真值')
  等同于:
  if bool(100):
     print('真值')

  if 语句 真值表达式返回的对象要用bool(x)取值后再决定执行哪儿条语句


if 语句的嵌套
   if 语句本身是由多条子句组成的一条复合语句
   if 语句可以作为语句嵌套到另一个语句的内部

示例见:
  改写 month.py

条件表达式:
  语法:
    表达式1 if 真值表达式 else 表达式2
  作用：
    根据真值表达式的取值(True/False) 来决定执行表达式1或表达式2,并返回结果
  示例见:
    if_else.py
pass 语句
  作用:
    通常用来填充语法空白
    pass 又名空语句
  语法:
    pass
  示例见:
    pass.py

布尔运算
  运算符:
    not  and   or

布尔非操作 not
  语法:
    not x
  作用:
    对表达式x进行布尔取非.如bool(x) 为True则返回False, 否则返回True
  示例:
    not True  # 返回False
    not False  # 返回True
    month = 10
    if not 1 <= month <= 12:
        print('month 不在1~12之间')


布尔与操作 and
  语法:
    x and y
    注: x, y 代表表达式
  作用:
    优先返回假值对象
    当x的布尔值为False时，返回x, 否则返回y
  示例:
    True and True   # True
    True and False  # False
    False and True  # False
    False and False # False
    0 and 0.0       # 0
    1.2 and 100     # 100


布尔或操作 or
  语法：
    x or y
  作用:
    优先返回真值对象
    当x为True时返回x,否则返回y
  示例:
    True or True    # True
    True or False   # True
    False or True   # True
    False or False  # False
    0 or 0.0    # 0.0
    100 or 200  # 100
正负号运算符:
  + (正号) 
  - (负号)
  语法:
    + 表达式
    - 表达式
  说明:
    这是一元运算符(只有一个数据参加运算)
  示例:
    a = 5
    b = -a
    c = +a
字符串 str
  作用:
    用来记录文本(文字)信息
  字符串的表示方式:
    在非注释中，凡是用引号括起来的部分都是字符串
    '    单引号
    "    双引号
    '''  三单引号
    """  三双引号
  空字符串的字面值表示方法
    ''
    ""
    ''''''
    """"""
  非空字符串的表示方法:
    'hello'
    "world"
    '''hello'''
    """world"""


单引和双引号的区别:
  单引号内的双引号不算结束符
  双引号内的单引号不算结束符
  示例:
    print("I'm a teacher!")  # I'm a teacher
    print('I am "weimingze"')  # I am "weimingze"
三引号字符串的作用:
  三引号字符串中的换行会自动转换为换行符
  三引号内可以包含单引号和双引号

  示例:
    s = 'welcome to beijing!\nI like python!\nI am Studing!'
    print(s)
    s2 = '''welcome to beijing!
    I like python!
    I am Studing!'''
    print(s2)

隐式字符串字面值拼接
   s = "I'm a teacher!"  'My name is "weimingze"'

思考:
  如果一个字符串同时包含如下字符该怎么办？
     '   "  '''  """ 

用转义序列代表特殊字符
  字符串字面值中，用字符反斜杠(\)后跟一些字符代表特殊的一个字符

反斜杠转义字符表:
   \'   单引号(')
   \"   双引号(")
   \\   一个反斜杠
   \n   换行
   \r   返回光标至行首
   \t   水平制表符
   \v   垂直制表符
   \f   换页
   \b   倒退
   \0   空字符，字符值为零
   \xXX  XX为两位十六进制表示的字符
   \uXXXX   XXXX为四个十六进制表示的Unicode16字符
   \UXXXXXXXX   8个十六进制表示的Unicode32字符

ASCII 编码：
  ASCII字符表:
  $ man ascii<回车>

常用的ASCII字符编码:
  字符   十进制   十六进制
  '0'     48      0x30
  'A'     65      0x41
  'a'     97      0x61

Unicode
   统一编码,分为Unicode16 和Unicode32



序列的概念
  字符串就是序列

求序列的长度的函数len
   len(x)  返回字符串的字符个数

练习:
  试求出以下字符串含有多少个字符?
  '1234abcd'  # 8
  '5\'4"'     # 4
  '\"A\x34\U00006041'  # 4
  '\b\n\td\r'
  '\\nn\\x41'


raw 字符串(原始字符串)
  格式:
    r'字符串内容'
    r"字符串内容"
    r'''字符串内容'''
    r"""字符串内容"""
  作用:
    让转义符号 \ 无效
  示例:
    s = 'C:\newfile\test.py'
    print(s)
    print(len(s))
    s = r'C:\newfile\test.py'
    print(s)
    print(len(s))


字符串的运算
  + 加号运算符用于拼接字符串
  * 运算符用于生成重复的字符串:
  示例:
    s = "ABC" + "DEF"  # s = 'ABCDEF'
    s2 = '123' * 3  # s2 = '123123123'
    s3 = 2 * 'ABC'  # s3 = 'ABCABC'
  注: 字符串只能和整数相乘

  += *= 运算符,与其它赋合赋值运算符规则相同
in / not in 运算符:
  作用:
    用于判断某个字符串是否在 相当前字符中出现过。如果出现过返回True,否则返回False
  语法:
    对象 in 字符串
  示例:
    s = 'welcome to tarena!'
    'to' in s  # True
    'weimingze' in s # False
    'e t' in s  # True

字符串的比较运算
  运算符:
    > >= < <= == !=
  规则:
    依次按编码值进行比较，直到最短的字符串结束为止
  示例:
    'A'  < 'B'      # True
    'ABC'  > 'ABB'  # True
    'ABC'  > 'ACB'  # False
    'AB'  < 'ABC'   # True
    'ABC'  > '123'  # True
    'ABC' == 'abc'  # False
    'ABCD' != 'DCBA' # True



字符串的索引操作
  python的字符串是不可以改变的字符序列

索引 index
  语法:
    字符串[整数表达式]
  说明:
    python 序列都可以用索引来访问序列中的对象
    python 序列的正向索引是多0开始的，第二个索引为1, 最后一个索引为len(s)-1
    python 序列的反向索引是从-1开始的，-1代表最后一个，-2代表倒数第2个，以此类推，第一个是-len(s)
  示例:
    s = 'ABCDE'
    print(s[0])  # A
    print(s[1])  # B
    print(s[4])  # E
    print(s[-1]) # E
    print(s[-5]) # A
切片 slice
  作用:
    从一个字符串序列中取出相应的元素重新组成一个字符串序列
  语法:
    字符串序列[(开始索引b):(结束索引e)(:(步长s))]
  
    注:
      小括号()括起的部分代表可省略
  说明:
    1.　开始索引是切片开始切下的位置，0代表第一个元素，1代表第二个元素,-1代表最后一个
    2. 结束索引是切片的终止索引(但不包含终止点)
    3. 步长是切片每次获取完当前元素后移动的方向和偏移量
      1)没有步长，相当于取值完成后向右移动一个索引的位置(默认为1)
      2) 当步长为正数时，取正向切片:
         步长默认为1,开始索引默认为0,结束索引默认为len(s)
         步长代表一下次索引的取值的增长值
      3) 当步长为负整数时，取反向切片
        默认的起始位置是最后一个元素，终止位置是第一个元素的前一个位置
  示例:
    s = "ABCDE"
    a = s[1:4]  # a = 'BCD'
    a = s[3:5]  # a = 'DE'
    a = s[3:]   # a = 'DE'
    a = s[:3]   # a = 'ABC'
    a = s[0:3]  # a = 'ABC'
    a = s[1:1]  # a = ''
    a = s[4:2]  # a = ''
    a = s[0:5:2]  # a = 'ACE'
    a = s[1::2]   # a = 'BD' 
    a = s[::2]    # a = 'ACE'
    a = s[::-1]   # a = 'EDCBA'
    a = s[::-2]   # a = 'EDCBA'
    a = s[4:0:-2] # a = 'EC'
文档地址:
   http://code.tarena.com.cn/AIDCode/aid1806/Pbase/python_base_docs_html.tar.gz

   $ tar -xzvf python_base_docs_html.tar.gz


python3中常用于序列的函数:
  len(x)   返回序列的长度
  max(x)   返回序列的最大值元素
  min(x)   返回序列的最小值元素

字符串编码转换函数:
  ord(c)   返回一个字符的Unicode值
  chr(i)   返回i这个整数值所对应的字符

示例:
  s = "hello"
  len(s)  # 5
  max(s)  # 'o'
  min(s)  # 'e'
整数转字符串函数:
  bin(i)   将整数转换为二进制字符串
  oct(i)   将整数转换为八进制字符串
  hex(i)   将整数转换为十六进制字符串

字符串构造函数:
  str(obj='')  将对象转换为字符串
示意:
  '123' + 456  # 出错，不合法
  str(True)  # 'True'
  str(None)  # 'None'
  str(3.14)  # '3.14'

常用的字符串方法:

字符串的方法调用语法(method):
    对象.方法名(方法传参)

  文档参见:
      python_base_docs_html/str.html
字符串的格式化表达式
  作用:
    生成一定格式的字符串
  语法格式:
    格式字符串 % 参数值
    格式字符串 % (参数值1, 参数值2, ...)
  说明:
    格式化字符串中以%开头的为占位符,占位符的位置将用参数值替换
  示例:
    fmt="name:%s, age: %d"
    name = "tarena"
    age = 15
    s = fmt % (name, age)  # s = 'name:tarena, age: 15'
    print()

格式化字符串中的占位符和类型码:
  %s     字符串,使用str(obj)转为字符串
  %r     字符串，使用repr(obj) 转为字符串
  %c     整数转为字符串，使用chr(i) 函数
  %d     十进制整数
  %o     八进制整数
  %x     十六进制整数(字符a-f小写)
  %X     十六进制整数(字符A-F大写)
  %e     指数型浮点数(e小写)  如 2.9e+10
  %E     指数型浮点数(E大写)  如 2.9E+10
  %f,%F  浮点十进制形式
  %g,%G  进制进形式浮点或指数浮点自动转换
  %%     等同于一个%字符


占位符和类型码之间的格式语法:
  % [- + 0 宽度.精度] 类型码
  -   左对齐(默认是右对齐)
  +   显示正号
  0   左侧空白位置补零
  宽度: 整个数据输出的宽度
  精度: 保留小数点后多少位,默认6位
  示例:
    "%10d"  % 123    # '       123'
    "%+10d"  % 123   # '      +123'
    "%-10d"  % 123   # '123       '
    "%10s" % "ABC"   # '       ABC'
    "%05d" % 123     # '00123'
    "%f" % 3.1416926535897932  # '3.141593'
    "%7.2f" % 3.1416926535897932 # '   3.14'
循环语句:
  while 语句
  for 语句

问题:
  输入一个整数n, 写程序打印如下:
     这是第 1 行
     这是第 2 行
     这是第 3 行
     ...
     这是第 n 行
  问题:
    如何让一条语句重复执行多次?
    用:
      print("这是第", i, '行')  
    能否实现


while 语句 
  作用:
    根据一定条件，重复的执行一条语句或多条语句
  语法:
    while 真值表达式:
        语句块1
    else:
        语句块2
  说明:
    1. 先执行真值表达式,测试布尔值是否为True或False
    2. 如果真值表达式测试值为True,则执行语句块1，然后再返回到第1步,重重进行测试
    3. 如果真值表达式测式值为False, 则执行else子句中的语句块2，然后结束此while语句，如果没有else子句，则直接结束此while语句的执行
    注： 
      else 子句部分可以省略（同 if语句类似)
  示例见:
    while.py
while 语句的注意事项:
  要控制循环真值表达式的值来防止'死循环'
  通常用真值表达式内的循环变量来控制循环条件
  通常在循环语句块内改变循环变量来控制循环次数和变量走向

while 语句的嵌套
  while 语句本身是语句，和其它语句一样，可以嵌套放入任何复合语句中

  示意:
    while 真值表达式:
        ...
        while 真值表达式2:
            ...
        else:
            ...
    else:
        ...
  示例:
    打印1~20之间的整数，打印在一行
    1 2 3 4 5 6 ......... 20
    打印以上的十行

sublime text 3 快捷键:
    ctrl + shift + 上下  # 交换行
    ctrl + ]   # 向右缩进
    ctrl + [   # 向左缩进
break 语句
  问题:
    如果在循环过程中不想再继续此循环语句的执行了，怎么办？
  作用:
    用于循环语句(while, for)中,用来终止当前循环语句的执行
  说明:
    1. 当break语句执行后，此循环语句break之后的语句将不再执行
    2. break 语句通常和 if 语句组合使用
    3. break语句终止循环时，循环语句else子句的语句将不会执行
    4. break 语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套的外重循环
    5. break 语句只能在循环语句(while或for语句)内部使用
  示例见:
    break.py

死循环
  死循环是指循环条件一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行

示例:
i = 1
while True:
    n = int(input("请输入一个数: "))
    if n == i:
        print("跳出循环")
        break
    print(i, n)
    i += 1
for 语句
  作用:
    用来遍历可迭代对象的数据元素

可迭代对象是指能依次获取数据元素的对象
可迭代对象包括:
  字符串 str
  ----以下后面会讲----
  列表 list
  元组 tuple
  字典 dict
  ...

for 语法
  for 变量列表 in  可迭代对象:
      语句块1
  else:
      语句块2

  说明:
    当循环内部用break语句终止循环时，else子句部分的语句不会执行
  示例见:
    for.py
    for2.py
    for3.py
range() 函数:
  格式:
    range(stop)  从零开始，每次生成一个整数后加1操作，直到stop为止(不包含stop)
    range(start, stop[, step]) 从 start开始，每次生成一个整数后移动step,直到stop为止(不包含stop,且step可以是负数)
  详见:
    >>> help(range)
  作用:
    用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
  说明:
    range函数调用返回的对象可用于for语句来进行依次迭代取出其中的整数
  示例：
    range(4)     # 生成 0, 1, 2, 3
    range(3, 6)  # 生成 3, 4, 5
    range(1, 10, 2)  # 生成 1, 3, 5, 7, 9
    range(5, 0, -2)  # 生成 5, 3, 1
    range(4, 0)      # 空
  见:
    range.py
for 语句嵌套:
  示例:
    for x in "ABC":
        for y in "123":
            print(x + y)
  思考:
    for x in range(5):
        for y in range(10):
            print(x, y, 'ABC')  # 请问这条语句执行多少次?
continue 语句:
  问题:
    如何让程序不再向下执行，重新开始一次新的循环

  continue语句的作用:
    用于循环语句中(while, for语句),不再执行本次循环内 continue之后的语句，重新开始一次新的循环
  说明:
    1. 在while语句中执行continue语句，将会直接跳转到 while语句的直值表达式处重新判断循环条件
    2. 在for 语句中，执行continue语句，将会从可迭代对象中取一下元素绑定变量后再次进行循环

  示例见:
    continue.py
循环总结
  语句:
    while 语句
    for 语句
       字符串 str
       range() 函数返回的对象
    break 语句:  结束当前循环语句的执行
    continue 语句:  结束本次循环，重新开始新的循环

列表 list
  列表的定义 ：
    1. 列表是一种容器(通常用来存储计算机的数据对象)
    2. 列表是可以被改变的序列
    3. 列表是由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，但他们之间有先后顺序关系

创建空列表的字面值方式
  L = []    # L绑定空列表

创建非空列表的字面值方式
  L = [1, 2, 3, 4]
  L = ['北京', '上海', '深圳', '西安']
  L = [1, 'Two', 3.14, '四']
  L = [1, 2, [3.1, 3.2, 3.3], 4]

列表的构造(创建)函数list
  list()   生成一个空的列表，等同于 []
  list(iterable)  用可迭代对象创建一个列表
示例:
  L = list()         # L = []
  L = list("hello")  # L = ['h', 'e', 'l', 'l', 'o']
  L = list(range(5, 10, 2))  # L = [5, 7, 9]


列表的运算:
  运算符:
    +   +=   *   *= 
  + 用于拼接列表
    x = [1, 2, 3]
    y = [4, 5, 6]
    z = x + y  # [1, 2, 3, 4, 5, 6]
  += 用于将右侧的可迭代对象的数据追加到原列表中
    x = [1, 2, 3]
    x += [4, 5, 6]  # x = [1, 2, 3, 4, 5, 6]
    x = [1, 2]
    x += "AB"  # x = [1, 2, 'A', 'B']
    x = [1, 2]
    x += range(3)  # x = [1, 2, 0, 1, 2]
  * 用于生成重复的列表
    x = [1, 2] * 3  # x = [1, 2, 1, 2, 1, 2]
    x = list("AB")
    x *= 2  # x = ['A', 'B', 'A', 'B']

列表的比较运算:
  运算符:
    < <= > >= == !=
  比较规则：
    同字符串比较规则完全相同
  [1, 2, 3] < [1, 3, 2]  # True
  [1, 2, 3] != [3, 2, 1]  # True
  [1, 'two'] > ['two', 1]  # TypeError 出错

  [1, 'two', 3.14] < [1, '二', 3]

列表是可迭代对象:
  L = [2, 3, 5, 7, 11]
  for x in L:
      print(x)

列表的in / not in 运算符:
  判断一个元素是否存在于列表中,如果存在返回True,否则返回 False
  in 和 not in 的返回值相反
  示例:
    x = [1, 'two', 3, '四']
    3 in x   # True
    4 not in x  # True
    '3' in x   # False
列表的索引操作：
  语法:
    列表[整数表达式]
  用法:
    等同于字符串的索引操作(索引分正向索引和反向索引，规则与字符串完全相同)

  列表的索引赋值
    列表是可变的序列，可以通过索引赋值改变列表中的元素
    语法:
      列表[整数表达式] = 表达式
  示例见:
    list_index.py



 列表的切片
   列表[:]
   列表[::]
   列表的切片取值返回一个列表,规则等同于字符串的切片规则
  例如:
    L = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    L2 = L[1::2]  # L2 = [1, 3, 5, 7]

  列表的切片赋值:
    作用:
      可以改变原列表的排列，可以插入和修改数据
      可以用切片改变列表对应的元素的值
    语法:
      列表[切片slice] = 可迭代对象
    说明:
      赋值运算符的右侧必须是一个可迭代对象
    示例:
      L = [2, 3, 4]
      L[0:1] = [1.1, 2.2]  # L = [1.1, 2.2, 3, 4]
      L[2:] = [3.3, 4.4, 5.5]  # L = [1.1, 2.2, 3.3, 4.4, 5.5]
      L[:] = [3, 4]
      L[0:0] = [1, 2]
      L = [3, 5]
      L[1:1] = [4.1, 4.2]  # [3, 4.1, 4.2, 5]
      L = [3, 5]
      L[2:2] = [6]  # L = [3, 5, 6]
      L = [3, 5, 6]
      L[1:2] = []  # 删除了中间的5
      L = [1, 6, 10]
      L[1:2] = range(2, 10)  # L = [1, 2, 3....10]
      L = ['D', 'E']
      L[:0] = "ABC"  # L = ['A', 'B', 'C', 'D', 'E']
      L = [1, 2, 3, 4, 5, 6]
      L[::2] = "ABC"
      L = [1, 2, 3, 4, 5, 6]
      L[::-2] = "DEF"
    切片赋值注意事项:
      对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象提供的数据元素的个数一定要等于切片切出的片数
    如:
      L = [1, 2, 3, 4, 5, 6]
      L[::2] = "ABC"  # 正确
      L[::2] = "ABCDE" #错误

    del 语句用于删除列表的元素
      语法:
        del 列表[索引]
        del 列表[切片]
      示例:
        L = [0, 1, 2, 3, 4, 5, 6]
        del L[0]  # L = [1, 2, 3, 4, 5, 6]
        del L[::2] # L = [2, 4, 6]
python3 中常用的序列相关的函数
  序列有5种：
    str, list, tuple, bytes, bytearray

  len(x)  返回序列的长度
  max(x)  返回序列的最大值元素
  min(x)  返回序列的最小值元素
  sum(x)  返回序列中所有元素的和(元素必须是数值类型)
  any(x)  真值测试,如果列表中其中一个值为真值则返回True
  all(x)  真值测试,如果列表中所有值为真值则返回True
  示例:
    L = ['北京', 100000, "天津"]
    len(L)  # 返回结果为3
    L = [8, 3, 6, 2]
    print(max(L))  # 8
    print(min(L))  # 2
    print(sum(L))  # 19
列表中常用的方法(method)
  详见:
    >>> help(list)
  参见:
    python_base_docs_html/list.html
数时，用空白字符作为分隔符分割
  S.join(iterable)   用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串

  示例:
    s = 'Beijing is capital'
    L = s.split(' ') # L = ['Beijing', 'is', 'capital']
    '\\'.join(['C:', 'Programe Files', 'python3'])
浅拷贝  和 深拷贝
浅拷贝 shallow copy
  浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程

示例:
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = L1.copy()  # 浅拷贝
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.14, 3.2]]
  print(L2)  # [1, 2, [3.14, 3.2]]

深拷贝 deep copy
  import copy  # 导入copy模块，以后再讲导入
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = copy.deepcopy(L1)  # 深拷贝
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.1, 3.2]]  #<<--此处不变
  print(L2)  # [1, 2, [3.14, 3.2]]

注:
  深拷贝通常只对可变对象进行复制，不可变对象通常不会复制

小结:
  L1 = [1, 2, [3.1, 3.2]]
  L2 = L1  # 不拷贝，创建一个变量同时绑定原对象
  L3 = L1.copy()  # 浅拷贝  等同于 L3 = L1[:]
  import copy
  L4 = copy.deepcopy(L1)  # 深拷贝


列表推导式 list comprehension
  列表推导式是用可迭代对象生成列表的表达式

  作用:
    用简易方法生成列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  说明:
    for in 表达式的if子句可以省略，省略后将对所有生成的对象进行求值处理
  示例:
    # 生成一个数值为 1 ~ 9 的平方的列表
    L = [x**2 for x in range(1, 10)]

练习:
  用列表推导式生成1~100内奇数的列表
  结果是: [1, 3, 5, 7, ..... 99]

  L = [x for x in range(1, 100, 2)]

  示例:
    生成1~00内的奇数的列表:
  L = [x for x in range(1, 100) if x % 2 == 1]
列表推导式的嵌套:
  语法:
    [ 表达式
        for 变量1 in 可迭代对象1 if 真值表达式1
            for 变量2 in 可迭代对象2 if 真值表达式2]
  示例:
    L = [x + y for x in "ABC" for y in "123"]
元组 tuple
  元组是不可变的序列，同list一样，元组可以存放任意类型数据的容器

元组的表示方法:
  用小括号() 括起来，单个元素括起来后加逗号(,)区分单个对象还是元组

创建空元组的字面值:
   t = ()   空元组

创建非空元组的字面值表示:
  t = 200,
  t = (20,)
  t = (1, 2, 3)
  t = 100, 200, 300

函数type(x) 用来返回x对应的类型
元组的错误示例:
  t = (20)  # t 绑定20这个对象，不是元组
  x, y, z = 100, 200, 300  # 序列赋值
  x, y, z = (100, 200, 300)  # 序列赋值
  x, y, z = [100, 200, 300]  # 序列赋值
  x, y, z = 'ABC'            # 序列赋值

元组的构造(创建)函数tuple
  tuple()   生成一个空元组，等同于()
  tuple(iterable)  用可迭代对象生成一个元组

  示例：
    t = tuple()   # 等同于 t = ()
    t = tuple(range(1, 10, 3))  # t = (1, 4, 7)
    t = tuple("ABC")  # t = ('A', 'B', 'C')
    t = tuple([1, 2, 3])  # t = (1, 2, 3)

元组的运算:
  + += * *=
  < <= > >= == !=
  in , not in
  索引[],切片[:]/[::]

+ 加号用于拼接元组
* 用于生成重复的元组

元组的比较运算:
  规则与列表的比较规则完全相同

in / not in 运算符
  规则与列表的规则完全相同

索引和切片
  索引取值和切片取值的规则与列表完全相同
  元组不支持索引赋值和切片赋值(因为元组不可被改变)

元组的方法:
  T.index(v[, begin[, end]]) 返回对应元素的索引下标
  T.count(x)  返回元组中对应的元素个数
  详见:
    >>> help(tuple)

序列相关的函数:
  len(x), max(x), min(x), sum(x), any(x), all(x)

构造函数:
  str(x)  创建字符串
  list(iterable) 创建列表 
  tuple(iterable) 创建元组

序列相关的函数:
  reversed(可迭代对象)  返回反向顺序的可迭代对象
  sorted(iterable, key=None, reverse=False) 返回已排序的列表

示例:
  t = (4, 8, 6, 2, 7)
  L = [x for x in reversed(t)]
  # L = [7, 2, 6, 8, 4]  # 原来先后顺序的反向
  for x in reversed(t):
      print(x)  #  打印: 7  2  6  8  4

  L2 = sorted(t)  # L2 = [2, 4, 6, 7, 8]
  L3 = sorted(t, reverse=True)  # L3 = [8, 7, 6, 4, 2]


容器小结:
  字符串 str   # 不可变序列，只能存字符
  列表 list    # 可变的序列，可以存任意数据
  元组 tuple   # 不可变序列，可以存任意数据



字典 dict

什么是字典:
  1. 字典是一种可变的容器，可以存储任意类型的数据
  2. 字典中的每个数据都是用'键'(key)进行索引，而不象序列可以用整数下标来进行索引
  3. 字典中的数据没有先后关系，字典的存储是无序的
  4. 字典中的数据以键(key)-值(value)对形式进行映射存储
  5. 字典的键不能重复，且只能用不可变类型作为字典的键

字典的字面值表示方法:
  字典的表示方式是以{} 括起来，以冒号(:) 分隔键-值对,各键-值对之间用逗号(,)分割开 

创建空字典的字面值:
  d = {}    # d 绑定空字典

创建非空字典的字面值:
  d = {'name': 'weimingze', 'age': 35}
  d = {1: 'One', 2: 'Two', 3: 'Three'}
  d = {'国籍': '中国'}
  d = {1: [1, 2, 3], 'abc': (1.1, 2.2, 2.3)}
  d = {123: list("123")}
  d = {'a': {'b': 200, 'c': [1, 2, 3]}}
  d = {(1970, 1, 1): 'computer year'}

字典的构造函数dict
  dict()  生成一个字的字典 等同于 {}
  dict(iterable)  用可迭代对象初始化一个字典
  dict(**kwargs)  用关键字传参形式创建一个字典

  示例:
    d = dict()
    d = dict([('name', 'tarena'), ['age', '15']])
    d = dict(name='tarena', age=15)

字典的键(key) 必须为不可变类型
  bool, int, float, complex, str, tuple, frozenset, bytes(后面再讲)

字典的值(value) 可以是任意类型
  
可变的数据类型有四种:
  list 列表
  dict 字典
  set  集合(后面才讲)
  bytearray 字节数组


字典的基本操作:
  字典的键索引
    用[] 运算符可以获取字典内'键'对应的值
    也可以用[] 运算符来修改'键'对应的值
  键索引的语法:
    字典[键]

  示例:
    获取值:
    d = {'name': 'tarena', 'age': 15}
    print(d['name'], '的年龄是:', d['age'])


添加/修改字典的元素
  语法:
    字典[键] = 值
  说明:
    键不存在时，创建键，并绑定对应的值
    当键存在时，修改键绑定的值
  示例:
    d = {}
    d['name'] = 'tarena'  # 创建新的键值对
    d['age'] = 15
    d['age'] = 16  # 修改'age'所对应的值
  
  删除字典元素
    del 字典[键]
  示例:
    d = {'name': 'tarena', 'age': 15}
    del d['name']
  

字典的成员资格判断 in 运算符
  可以用in运算符判断一个键是否存在于字典中，如果'键'存在则返回True,否则返回False
  not in 与 in 结果相反

  示例:
    d = {'name': 'tarena', 'age': 15}
    if 'name' in d:
        print('name 在字典中')

    print(15 in d)  # False,只判断键，不判断值


写程序，实现以下要求:
  1) 将如下数据形成一个字典seasons:
    '键'    '值'
     1      '春季有1, 2, 3月'
     2      '夏季有4, 5, 6月'
     3      '秋季有7, 8, 9月'
     4      '冬季有10,11,12月'
  2) 让用户输入一个整数，代表一个季度，打印这个季度对应的信息，如果用户输入的信息不在字典内，则打印信息不存在



字典的迭代访问
  字典是可迭代对象，字典只能对键进行迭代访问

  示例:
    d = {'name': 'tarena', 'age': 15}
    for k in d:
        print(k, '对应的值是: ', d[k])

可以用于字典的内建函数
  len(x) 返回字典的键值对个数
  max(x) 返回字典的键的最大值
  min(x) 返回字典的键的最小值
  sum(x) 返回字典中所有键的和
  any(x) 真值测试，只要有一个键为True,返回True
  all(x)  真值测试，当全部键为真值是，返回True

  示例:
    d = {0: '零', 5: '伍', 8: '捌', 3: '参'}
    print(len(d))  # 4
    print(max(d))  # 8
    print(min(d))  # 0
    print(sum(d))  # 16
    print(any(d))  # True
    print(all(d))  # False
字典推导式:
  字典推导式是用可迭代对象创建字典的表达式

  语法:
    {键表达式 : 值表达式 for 变量 in 可迭代对象 if 真值表达式}
  说明:
    if 子句部分可省略
  示例:
    生成一个字典，键为数字(10以内), 值为键的平方
    d = {x : x ** 2 for x in range(10)}
字典 VS 列表
  1. 都是可变对象
  2. 索引方式不同,列表用整数索引，字典用键索引
  3. 字典的插入，删除，修改数据的速度可能会快于列表(重要)
  4. 列表的存储是有序的，字典的存储是无序的
集合 set
  集合的是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构，集合中的数据没有先后关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合
  s = set()

创建非空集合
  s = {1, 2, 3}
  s = {3.14, True, (1970,1,1), "hello"}

集合的构造函数 set
  set()  创建一个空的集合对象(不能用{}创建空集合)
  set(iterable)  用可迭代对象创建一个新的集合对象
示例:
  s = {1, 3, 5, 7}
  s = set("ABC")
  s = set("ABCCBA")
  s = set({1:'1', 2:'2', 5:'5'})
  s = set([1, 0, 3.14, "hello"])
  s = set(('abc', '123', True))

集合的运算:
   交集，并集，补集，子集，超集

& 生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 & s2  # s3 = {2, 3}

|  生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补集 
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 - s2  # 生成属于s1但不属于s2的所有元 素的集合

^ 生成两个集合的对称补集
  s1 = {1, 2,i 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # (s1 - s2) | (s2 - s1)
                # {1, 4}

> 判断一个集合是另一个集合的超集
< 判断一个集合是另一个集合的子集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2  # True  s1 为 s2的超集
  s1 < s2  # False  s2 为 s1的子集

== != 集合相同/不同  
  s1 = {1, 2, 3}
  s2 = {3, 2, 1}
  s1 == s2  # 


in , not in 运算符
  等同于字典in,not in,
  作于集合中，判断某个值是否存在于集合中

集合和字典的优点:
  in / not in运算符的判断速度快些

能用于集合的函数:
  len(x), max(x), min(x), sum(x), any(x), all(x)

集合练习:
  经理有: 曹操,刘备,孙权
  技术员有: 曹操,孙权,张飞,关羽
  用集合求:
    1) 即是经理，也是技术员的有谁?
    2) 是经理，但不是技术员的人员都有谁？
    3) 是技术员，不是经理的都有谁
    4) 张飞是经理吗？
    5) 身兼一职的人都有谁？
    6) 经理和技术员共有几个人?





python3 中常用的集合方法:
  文档参见:
    python_base_docs_html/set.html

集合推导式
  集合推导式是用可迭代对象生成集合的表达式

  语法:
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}

    注: [] 括号部分可以省略
  
  示例:
    L = [1, 3, 5, 7, 2, 4, 6, 8, 1, 3, 5]
    s = {x for x in L}

集合推导式可以嵌套:
   语法同列表推导式一致!
固定集合 frozenset
  固定集合是不可变的，无序的， 含有唯一元素的集合
  作用:
    固定集合可以作为字典的键，还可以作为集合的值

  固定集合的构造函数:
    frozenset()  创建一个空的固定集合
    frozenset(iterable)  用可迭代对象创建固定集合
  示例:
    f = frozenset()   # 空固定集合
    f = frozenset([1, 3, 5, 7])  # f = frozenset({1, 3, 5, 7})

固定集合的运算:
  & 交集， | 并集,  - 补集, ^ 对称补集
  < <= > >= == !=
  in / not in 
  (以上运算符和 集合 set中的用法完全一致)

固定集合的方法
  相当于集合的全部方法去掉修改集合的方法



1. 数据类型:
  数值类型：
    int, float, complex, bool
  容器:
    不可变的容器
      str, tuple, frozenset, bytes(字节串)
    可变的容器
      list, dict, set, bytearray(字节数组)
2.值:
    None, False, True

3. 运算符
  算术运算符
    + - * /  //  %  **
  比较运算符:
    < <= > >= == !=
  in / not in 
  is, is not
  布尔运算:
    not, and, or
  +(正号) -(负号)
  & | ^ 
  [] (索引,切片,键索引)


表达式:
  1
  1 + 2
  max(1,2,3)  # 函数调用是表达式
  x if x > y else y, 条件表达式 
  三种推导式:
    列表，字典，集合推导式(三种)

语句
  表达式语句:
    所有的表达式都可以单独写在一行，形成一个语句,例:
      print("hello world")
      1 + 2
  赋值语句:
    a = 100
    a = b = c = 100
    x, y = 100, 200
    a[0] = 100
    dict['name'] = 'tarena'
  del 语句
  if 语句
  while 语句
  for 语句
  break 语句
  continue语句
  pass 语句


内建函数:

  len(x), max(x), min(x), sum(x), any(x), all(x)
  构造函数(用来创建同类型的数据对象)
    bool(x), int(x), float(x), complex(x),
    list(x), tuple(x), str(x), dict(x), set(x),
    frozenset(x)
  abs(x)
  round(x)
  pow(x, y, z=None)

  bin(x), oct(x), hex(x)
  chr(x), ord(x)
  range(start, stop, step)
  input(x), print(x)

  >>> help(__builtins__)

函数 function
  什么是函数:
    函数是可以重复执行的语句块，可以重复调用
  作用:
    1. 用 于封装语句块，提高代码的重用性
    2. 定义用户级别的函数

  语法:
    def 函数名(形参列表):
        语句块
  说明:
    1. 函数的名字就是语句块的名称
    2. 函数名的命名规则与变量名相同（函数名必须是标识符）
    3. 函数名是一个变量(不要轻易对其赋值)
    4. 函数有自己的名字空间，在函数外部不可以访问函数内部的变量，在函数内可以访问函数外部的变量,但不能修改此变量.
    5. 函数如果不需要传入参数，形参列表可以为空
    6. 语句部分不能为空，如果为空需要填充pass
  示例见:
    function.py

函数调用
  函数名(实际调用传递参数)
    注:实际调用传递参数，以后简称实参

  说明:
    1. 函数调用是一个表达式
    2. 如果函数内部没有return语句，函数调用完毕后返回None对象
    3. 如果函数需要返回其它的对象需要用到 return 语句
return 语句
  语法:
    return [表达式]
    注: []  代表可省略
  作用:
    用于函数中，结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系

  return 语句说明
    1. return 语句后跟的表达式可以省略，省略后相 当于return None
    2. 如果函数内没有return 语句，则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  示例见:
    return.py函数的参数传递
  传递方式:
    位置传参
      序列传参
    关键字传参
      字典关键字传参

位置传参:
  实际参数(实参) 的对应关系与形式参数(形参)的对应关系是按位置来依次对应的

  示意:
    def mymin(a, b, c):
        pass

    mymin(    1, 2, 3)

  示例见:
    position_give_args.py
  说明:
    实参和形参通过位置进行传递和匹配
    实际参数的个数必须与形式参数的个数相同
　　
序列传参:
  序列传参是指在函数调用过程中，用 * 将序列拆解后按位置进行传递的传参方式

  说明:
    序列传参时，序列拆解的位置将与形参－－对应
    序列的位置信息对应相应的形参位置

  示例见:
    sequence_give_args.py

关键字传参
  关键字传参是指传参时，按着形参的名称给形参赋值
  实参和形参按形参名进行匹配

  示例见:
    keywords_give_args.py

字典关键字传参
  是指实参为字典，将字典用　'**' 拆解后再进行关键字传参的传参方式

  示例见:
    dict_keywords_give_args.py
  说明:
    字典的键名和形参名必须一致
    字典的键名必须为字符串(标识符)
    字典的键名要在形参中存在


函数的综合传参
  函数的传参方式在能确定形参能唯一匹配到相应实参的情况下可以任意组合

  说明:
    位置传参(序列传参) 要在 关键字传参(字典关键字传参)的左侧
  示例:
    def myfun1(a, b, c):
        pass
    # 调用时:
    myfun1(100, *[200, 300])
    myfun1(*(100, 200), 300)
    myfun1(*[100], 200, *(300,))
    myfun1(100, c=300,b=200) # 正确
    myfun1(c=300, b=200, 100)  # 错误
    myfun1(100, **{'c':300, 'b':200})



-----------以下讲函数形参的定义----------
函数的缺省参数:
  语法:
    def 函数名(形参名=默认实参1, 形参名2=默认实参2, ...):
        语句块

  示例见:
    default_args.py

  说明:
    缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其右侧的所有参数都必须有缺省参数
     如:
       def fe(a, b=10, c):  # 错误
            pass
函数形参的定义方式:
  1. 位置形参
  2. 星号元组形参
  3. 命名关键字形参
  4. 双星号字典形参

位置形参:
  语法:
    def 函数名(形参名1, 形参名2, ...):
        语句块

星号元组形参
  语法:
    def 函数名(*元组形参名):
       语句块
  作用:
    收集多余的位置传参
  示例见:
    star_tuple_args.py

命名关键字形参:
  语法:
    def 函数名(*, 命名关键字形参):
      语句块 
    或
    def 函数名(*args, 命名关键字形参):
      语句块 
  作用:
    强制所胡的参数都必须用关键字传参或字典关键字传参

  示例见:
    named_keyword_args.py

双星号字典形参
  语法:
    def 函数名(**字典形参名):
       语句块
  作用:
    收集多余的关键字传参
  说明:
    字典形参名通常命名为'kwargs'
  示例见:
    double_star_dict_args.py
函数的参数说明:
  位置形参，缺省参数，星号元组形参，双星号字典形参可以混合使用

  函数形参自左至右的顺序为:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参
  示例:
    def fx(a, b, *args, c, **kwargs):
         pass
    fx(100, 200, 300, 400, c="C", d="D", e="E")

函数的不定长参数:
  星号元组形参, 双星号字典形参

  说明:
    可以接收任意的位置传参和关键字传参
  示例:
    def fn(*args, **kwargs):
        pass

思考题:
  查看 >>>help(print)猜想print函烽的参数列表 是如何定义的?



全局变量和局部变量
  局部变量: local variable
    1. 定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
    2. 局部变量只能在函数内部使用
    3. 局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁

  全局变量 global variable
    定义在函数外部，模块内部的变量称为全局变量
    全局变量所有函数都可以直接访问(但函数内不能将其直接赋值)
  示例见:
    global_local.py
globals() / locals()函数:
  globals() 返回当前全局作用域内变量的字典
  locals()  返回当前局部作用域内变量的字典

示例见:
  globals_locals.py

函数变量
  函数名是变量，它在def 语句创建函数时绑定一个函数

示例见:
  function_variable.py



一个函数 可以作为另一个函数的实参传递
示例见:
  give_function_as_args.py
  give_function_as_args2.py

看懂如下代码:
  def myinput(fn):
      L = [5, 3, 1, 9, 7]
      return fn(L)

  print(myinput(max))
  print(myinput(min))
  print(myinput(sum))
  print(myinput(len))



函数可以作为另一个函数的返回值
  示例见:
    return_function.py




函数的嵌套定义
  函数嵌套定义是指一个函数里用def语句来创建其它的函数的情况

  示例:
    def fn_outter():
        print("fn_outter被调用")
        def fn_inner():
            print("fn_inner被调用")
        fn_inner()
        fn_inner()
        print("fn_outter调用结束")

    fn_outter()

python 的作用域
  作用域也叫名字空间，是访问变量时查找变量名的范围空间

python的四个作用域:
  作用域               英文解释          英文缩写
局部作用域(函数内)    Local(function)         L
外部嵌套函数作用域 Enclosing function locals  E
函数定义所在模块(文件)作用域  Global(module)   G
Python内建模块的作用域      Builtin(Python)   B

示例见:
  namespace.py

变量名的查找规则
  在变量访问时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内建变量
    即：
      L ----> E ----> G ----> B
    在默认的情况下，变量名赋值会创建或者改变当前作用域的变量




global 语句
  作用:
    1. 告诉解释执行器 global 语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局变量
    2. 全局声明(global)将赋值语句操作的变量映射到模块文件内部的作用域

  语法:
    global 变量1, 变量2, ...
  示例见:
    global.py
  说明:
    1. 全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是创建局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问(变量已经存在并关联一个对象)
    3. 不能先声明局部变量，再用global声明为全局变量，此做法不附合规则
    4. global变量列表里的变量名不能出现在此作用域的形参列表里


练习:
  写一个函数叫hello(name),部分代码如下:
  count = 0
  def hello(name):
      print('你好', name)
      ... 此处代码省略,需要同学们自己填写
      ... 此处代码需要改变全局变量来记录此函数曾经被调用过多少次.
  
  hello('小张')
  hello('小李')
  print('hello 函数被调用', count, '次')  # 2次





nonlocal 语句
  作用:
    告诉解释执行器，nonlocal声明的变量不是局部变量，也不是全局变量，它是外部嵌套函数内的变量

  语法:
    nonlocal 变量名1, 变量名2, ....
  示例见:
    nonlocal.py
  说明:
    1. nonlocal 语句只能在被嵌套的函数内部进行使用
    2. 访问nonlocal变量将对外部嵌套函数作用域内的变量进行操作
    3. 当有两层或两层以上函数嵌套时，访问nonlocal变量只对最近的一层变量进行操作
    4. nonlocal语句的变量列表里的变量名，不能出现在此函数的参数列表中





def 语句:
   作用:
     创建函数

lambda 表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同 def 类似,但不提供函数名
  格式:
    lambda : 表达式
  示例见:
    lambda.py
  说明:
    1. lambda 只是一个表达式，它用来创建一个函数对象
    2. 当lambda表达式调用时，先执行冒号(:)后的表达式，并返回表达式的结果的引用关系
    3. lambda 表达式创建的函数只能包含一条表达式
    4. lambda 比函数简单且可以随时创建和销毁，有利于减少程序的偶合度

eval() / exec() 函数

  eval(source, globals=None, local=None)  把一个字符串 srouce 当成一个表达式来执行，返回表达式执行的结果

  exec(source, globals=None, locals=None) 把一个字符串source 当成程序来执行

eval示例见:
   eval.py
   eval2.py

exec 示例见:
  exec.py
  函数式编程
  　　函数式编程是指用一系列函数解决问题
  好处:
    1．　用每一个函数完成细小的功能，一系列函数的任意组合可以完成大问题
    2．　函数仅接受输入并产生输入，不包含任何能影响输出的内部状态

  函数的可重入性
    如果一个函数的输入参数一定，则返回结果必须一定的函数称为可重入函数
  示例:
    # 可重入函数，传入参数一定．结果必然一定
    def myadd(x, y):
        return x + y

　　　　# 不可重入函数:
    y = 200
    def myadd2(x):
        return x + y
    print(myadd2(10))  # 210
    y = 300
    print(myadd2(10))  # 310

  函数式编程的要求:
    def 创建的函数最好不要访问局部作用域以外的变量，这样可以保证返回结果的唯一性(可重入性)


高阶函数 High Order Function
  什么是高阶函数:
    满足下列条件之一的即为高阶函数
      1. 函数接受一个或多个函数作为参数传入
      2. 函数返回一个函数

  python内建的高阶函数:
    map, filter, sorted
      详见:
        python_base_docs_html/内建函数(builtins).html

map函数:
  格式:
     map(func, *iterables)
  示例见:
    map.py
filter 函数:
  filter(function, iterable)

filter示例见:
  filter.py
sorted 函数:
  作用:
    将原可迭代对象的数据进行排序，生成排序后的列表
  格式:
    sorted(iterable, key=None, reverse=False)
  说明:
    iterable 可迭代对象
    key 函数是用来提供一个值，这个值将做为排序的依据
    reverse 标志用来设置是否降序排序
  示例见:
    sorted.py

递归函数 recursion
  函数直接或间接的调用自身

递归示例:
  # 函数直接调用自己
  def f():
      f()  # 调用自己
  f()

  # 函数间接的调用自己
  def fa():
      fb()

  def fb():
      fa()

  fa()

递归说明:
  递归一定要控制递归的层数，当符合一定条件时要终止递归
  几乎所有的递归都能用while循环来代替

递归的优缺点:
  优点:
    递归把问题简单化，让思路更为清晰，代码更简洁
  缺点：
  　　递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果

递归的两个阶段
  递推阶段: 从原问题出发，按递归公式递推从末知到已经，最终达到递归的终止条件
  回归阶段: 按递归终止条件求出结果,逆向逐步代入递归公式．回归到原问题求解

示例见:
  recursion.py
  recursion_fac.py
闭包 closure
什么是闭包:
  闭包是指引用了此函数外部的变量的函数

说明:
  在本质上，闭包是将内部嵌套函数和函数外部的执行环境绑定在一起的对象

闭包必须满足三个条件:
  1. 必须有一个内嵌函数
  2. 内嵌函数必须引用外部函数中的变量
  3. 外部函数返回值必须是内嵌函数
示例见:
  closure.py

  # 闭包的应用见:
  closure2.py
装饰器 decorators(专业提高篇)
  装饰器是一个函数，主要作用是用来包装另一个函数或类(后面才讲)

  装饰的目的是在不改变原函数名（或类名) 的情况下，改变被包装对象的行为

函数装饰器
  函数装饰器指装饰器传入的是一个函数，返回的也是一个函数

  语法:
    def 装饰器函数名(参数):
        语句块
        return 函数对象

    @装饰器函数名<换行>
    def 函数名(形参列表):
        语句块

  示例见:
    mydeco1.py
    mydeco2.py
    mydeco3.py
    mydeco4.py

函数的文档字符串
  函数内第一次未被赋值给任何变量的字符串是此函数的文档字符串

  语法:
    def 函数名(参数列表):
        '函数文档字符串'
        函数语句块
  示例:
    def myfun(name, x):
        '''这是函数的文档字符串
        name 表示人名
        x 表示钱数
        '''
        pass

    >>> help(myfun)

  说明:
    1. 文档字符串通常用来说明本函数的功能和使用方法
    2. 在交互模式下输入: help(函数名) 可以查看函数的'文档字符串'
    3. 函数的文档字符串绑定在函数的 __doc__ 属性上

函数的 __doc__ 属性
   用于绑定函数的文档字符串


函数定义语句(def 语句) 的完整语法:
  [@装饰器1]
  [@装饰器2]
  [...]
  def 函数名([位置形参], [*元组形参], [命名关键字形参], [**字典形参]):
      '''文档字符串'''
      语句块

  注: [] 代表其内部可以省略


