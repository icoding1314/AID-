day01回顾:
  
python的版本
  python 2
  python 3

解释执行器
  python3 (C语言开发，CPython的一种)
python 文件的后缀 .py

运行两种模式:
  执行模式:
     python3 xxxx.py
  交互模式:
     python3 <回车>
     >>>  

数字类型:
  整型数int, 浮点型数float, 复数complex, 布尔型数 bool

整数:
  -100, 100, 0, 999999999999
  0b1001
  0o1234567
  0x1a2b3c
浮点型数:
  3.14
  0.314e1
复数:
  1+2j
布尔型数:
  True, False



None 空值


运算符:
  + - * / // %  **

() 分组子表达式

变量
  变量名必须标识符:
    标识符的正则表达式:
      [A-Za-z_] [A-Za-z0-9_]*
    变量名不能是关键字
      True, False, None, is, not, del, ...
赋值语句:
  变量名 = 表达式
    x = 100
  变量名1 = 变量名2 = 变量名3 = .... = 表达式
    x = y = z = 100
  变量名1, 变量名2, 变量名3 = 序列   (序列赋值)
    x, y, z = 100, 200, 300


del 语句删除变量

引用计数 refrence count

is / is not 运算符

id(obj)  返回一个对象的地址

小整数对象池
  -5 ~ 256  

复合赋值运算:
  +=   -=   *=   /=   //=    %=   **=

  变量名 += 表达式
day02回顾
运算符
  + - * / // % **
  > < >= <= == !=
  is  is not
  not, and, or
  + -
表达式
  1
  1 + 2
  -5
  100 + 200 < 300 + 400
  abs(-100)
  x + 100 if x < 5 else x + 200
语句
  赋值语句:
    a = 100 + 200
  del 语句
    del a
  表达式语句:
    print("hello")
  if 语句：
    if score >= 60:
        print("及格")
    else:
        print("不及格")


哪些函数?
  abs(x)  
  round(数字, 位数)
  pow()

  int(x)
  float(x)
  complex(x)
  bool(x)
    None, False, 0, 0.0, 0j, '', [], (), {}

  input('提示语')
  print(1, 2, 3, 4, sep='#', end='\n\n')

  if 语句
      if 真值表达式:
          语句1
      elif 真值表达式2:
          语句2
      ...
      else:
         语句3

  if-else 条件表达式
    左表达式 if 真值表达式 else 右表达式

  r = "及格" if score >= 60 else '不及格'

  r = '不及格' if score < 60 else '及格'

pass 语句
布尔运算符
  not 布尔非

  and 布尔与

  or 布尔或
day03回顾:

字符串 str
''
""
''''''
""""""

'''first line
second line'''

字符串内的转义字符 '\'
  \n
  \r
  \t
  \'
  \"
  \\
  \xXX
  \uXXXX
  \UXXXXXXXX

ascii (记录128个英文字符对应的编码)
Unicode (记录65536个文字(包含英文的128个ASCII))

ASCII与UNICODE的区别:
  ASCII 用8个位表示文字，最高位一定为0,低7位表示数值
  UNICODE16是由16个位组成的（0～65535)0x0000~0xFFFF

原始字符串
  r''
  r""
  r''''''
  r""""""
  '\n' != r'\n'
字符串的运算
  < <= > >= == !=
  +    *   +=    *= 
  in,  not in 
  索引， 切片

函数:
  len(x)
  max(x)    求最大值的字符
  min(x)
  ord(单个字符)
  chr(整数)

  hex(i)
  oct(i)
  bin(i)  转为字符串

  str(obj)  #将对象转为字符串

  常用的字符串
  S.count
  S.strip()
  S.center()
  S.replace()
  S.startswith()
  S.endswith()
  ....
  查看字符串的方法:
    >>> help(str)  # str是字符串的类型
day04回顾:
  字符串
    字符串格式化表达式
      字符串  % (参数)
    生成一定格式字符串
    %%
    %d
    %s
    ...
  占位符和类型码之间的 格式化语句
    %+07.2f
    %-+7.2f
    
  循环语句
    break
  
while 语句
  语法:
    while 真值表达式:
        语句块1
    else:
        语句块2

while 语句的嵌套

break 语句
  作用：
    跳出循环(结束包含此break语句的循环语句)

死循环:
  while True:
      if ....:
         break
  else:
     .......

day05回顾:
  循环语句
    for 语句
        语法:
          for 变量列表  in 可迭代对象:
              语句块1
          else:
              语句块2
    可迭代对象:
       字符串list
       range(开始值，结束值，步长)
       列表 list
       （包含以后所学的全部的容器类)
    continue语句
      重用开始一次新的循环
        for, while 开始的位置不同
  容器类
    列表 list
      是可变的序列
      也是容器
    字面值表示方式:
      []
    列表的构造(创建)函数
       list()
       list(可迭代对象)
    列表的运算:
      + += * *=
      注意:
        变量名 += 可迭代对象
      < <= > >= == !=
      in / not in 

day06回顾:
  列表:
    是可变的序列
    是容器
  索引和切片操作
    列表可以索引赋值和切片赋值
  del 语句
    用于删除列表中的元素
        del 列表[整数表达式]
        del 列表[切片]
  序列相关的函数:
    len(x), max(x), min(x), sum(x), any(x), all(x)

  列表中的方法:
    L.index(v)   
    L.insert(index, obj)
    L.count(x)
    L.remove(x)
    L.copy()
    L.append(x)
    L.extend(lst)   # L += lst
    L.clear()
    L.sort()
    L.pop(索引)
    L.reverse()  列表的反转
  深拷贝deep copy , 浅拷贝 shallow copy

字符串的方法：
  str.split()  分割
  str.join()   连接

列表推导式 
  [x ** 2 / 7 for x in range(1, 10, 2) if ...]

  [x + y for x in [10, 20, 30] for y in range(10)]
day07回顾:
  元组 tuple
    元组是不可变的序列容器
  序列的运算：
    + *  += *=
    < <= > >= == !=
    in , not in
    索引和切片

  字典 dict
    键-值(key-value)对

    键不能重复，且只能用不可变类型做为字典的键
      字典[键] = 值  # 添加和修改键-值对  
      del 字典[键]
    {1: 100, 2: 200}

  字典的运算
    键索引
      字典[键] = value
      var = 字典[键]
    in , not in 

  字典推导式
    {键表达式: 值表达式 for 变量 in 可迭代对象 if 真值表达式 for 变量2 in  可迭代对象 .... }
  
  字典的列表的区别:
day08回顾:
  集合set，固定集合frozenset

  & | - ^ < >
  >= <= == != 
  in, not in

  S.add()
  S.remove()
  S.discard() 
  S.clear()
  S.pop()
  ....
  集合是可迭代对象

  集合推导式:
    [x for x in range(10)]
    {x for x in range(10)}
    {x:x**2 for x in range(10)}

函数　function
  def 语句语法:
    def 函数名( 形参列表 ):
        语句块

  作用:
    创建函数

函数调用:
  函数名( 实参列表 )

  def fa():
      pass

  v = fa()  # v绑定None

return 语句

day09回顾:
  传参
    把数据传递给函数

    传递方式:
      位置传参
        序列传参
      关键字传参
        字典关键字传参

  形参:
    把调用函数的实参拿到(接收实参)
      形参的定义方式有四种:
        位置形参
        *元组形参(接收多余的位置传参)
        命名关键字形参(强制必须使用关键字传参)
        ** 字典形参(接收多余的关键字传参)
    函数的缺省参数 default argument  
        def fx(a, b=0, c=100):
            pass

全局变量  和 局部变量 

在函数内赋值语句
   变量 = 表达式

day10回顾:
  局部变量   全局变量

  locals()  globals()

  def fa(a, b):
      pass
  一个函数可以作为参数传入另一个函数
      def fx(fn):
          pass
      fx(max) # 传入一个函数
  函数可以作为另一个函数的返回值
  　　　　def fx():
          return max

      m = fx()  # 此函数调用返回一个max函数

      def fy():
          def hello():
              print("hello")
          return hello
      h = fy()
      h()  # 此

    函数嵌套定义

    python 四个作用域:
       局部作用域　
       外部嵌套函数作用域
       全局作用域
       内建模块的作用域

　　　　global  语句
    nonlocal 语句

    def 语句创建函数
    lambda 表达式
       myadd = lambda x, y: x + y

eval(s) 函数
   ... 表达式 ...

exec(s) 函数
   ... 语句(程序) ...

day11回顾
  高阶函数
    map, filter, sorted
  递归 recursion

  闭包 closure

day12回顾:
  装饰器

  @ 装饰器函数名
  def myfun(a, b):
      pass

  等同于:

  def myfun(a, b):
      pass
  myfun = 装饰器函数名(myfun)
函数的文档字符串
  
  函数的文档字符串由函数的  __doc__ 属性绑定


模块 
  模块的分类:
    内建模块
    标准库模块
    第三方模块 (如: $ pip3 install tensorflow)
    用户自己编写的模块

  模块的导入语句有三种:
    import 语句
       例:
          import math
          math.factorial(5)
          import math as m
          m.factorial(5)
    from import 语句
       例:
         from math import factorial
         factorial(5)
         from math import factorial as f
         f(5)
    from import * 语句
       例:
         from math import *
         sin(pi/2)
  
    dir() 函数 返回当前作用域内有哪儿些变量
         ..

内建模块:
  math
  sys
  time
day13回顾
  自定义模块
    模块名.py
      模块名必须是'标识符'


  三条导入语句：
    import 语句
    from import 语句
    from import * 语句

  __all__列表和 以'_'隐藏属性 会对 from import 语句或 from import * 语句产生影响

  搜索路径的顺序
    1. 当前路径
    2. sys.path列表提供的路径
    3. 索引系统内建模块
  
  .pyc 文件


模块的预置属性
  __doc__属性
  __file__属性
  __name__属性
    常用来判断是否是主模块


标准库模块
  随机模块 random
  
包 package
  __init__.py

包的导入
  import 语句
     import xxx.yyy.zzz 
  form import 语句
     from xxx.yyy.zzz import aaa
  form import *语句
     from xxx.yyy.zzz import *

包的 __init__也有 __all__列表
  
包的相对导入:
  .
  ..
  ...

day14回顾
异常
  错误
  异常

四条语句:
  try-except 语句
  try-finally 语句
  raise 语句
  assert 语句

day15回顾:
  迭代器
    得到迭代器:
      iter(x)  返回一个访问x的迭代器
    从迭代器it中拿数据
      next(it)
        在没有数据时用StopIteration异常来通知
  for 语句可以遍历可迭代对象

两种生成器:
  生成器函数:
    生成器函数里有定有 yield 语句
  
  next(it) 每次调用，生成器函数才会执行

  生成器表达式:
    (表达式　for 变量 in 可迭代对象 if 真值表达式)
  

迭代工具函数:
  zip(可迭代对象1, 可迭代对象2, .....) 
  enumerate(可迭代对象, start=0)

序列:
  字节串bytes，字节数组bytearray

  运算:
    + += * *=
    < > <= >= == != 
    in / not in 
    索引和切片
  
  b'' b""   ....
  bytes() / bytearray()
  bytes(iterable) / bytearray(iterable)
  bytes(n)  / bytearray(n)
  bytes(字符串, 'utf-8') / bytearray(字符串,'utf-8')

  字节数组是可变的序列:
    支持索引和切片赋值
    支持一些方法:
       ba.append(x)
       ba.pop(x)
       ...
       ba.clear()

   s = "你好"
   b = s.encode() # b = s.encode('utf-8')
   s2 = b.decode()  # s2 = b.decode('utf-8')

day16回顾:
   文件
     文本模式
       把文件的字节码自动转换为字符串,
       换行符会自动转换为'\n'
       F.read()
       F.readline()
       F.readlines()
       F.write
    二进制模式
       通过字节串(字节数组)进行读写
       F.read()
       F.write()
       F.tell()
       F.seek()
    模式字符:
       'b'
       't'
       'r'
       'w'
       'a'
       'x'
       '+'

文件流对象是可迭代对象
    f = open('xxx.py')
    for line in f:
        ...

汉字编码:
   国标: GB18030(GBK(GB2312))
   国际标准: UNCODE32(UNCODE16)  ---  UTF-8

   编码字符串:
     'gbk'
     'gb18030'
     'gb2312'
     'utf-8'
     'ascii'
  编码注释:
    # -*- coding: utf-8 -*-

day17回顾

class 语句
  创建类:
    class 类名:
        def 方法名(self, 方法形参):
           ...
        def __init__(self, 方法形参):
            '''通常在此处对self对象进行初始化操作'''

        def __del__(self):
            '''通常用来销毁此对象绑定的数据及释放资源'''

  实例方法(method) 描述一个对象有哪儿些行为为
  属性(实例变量)
    添加/修改属性
      对象.属性名 = 表达式
    del 对象.属性名

    类    |     对象          实例
          |
  class   |   object        instance



 __dict__ 属性
   绑定字典(字典里用来保存属性)

 __class__属性
   绑定创建此对象的类


isinstance(obj, 类或元组)
type(obj)  

day18回顾
   对象 ---------- > 类
 实例变量(属性)     类变量
 实例方法          类方法(@classmethod)

静态方法   @staticmethod

类内的预置属性:
    __doc__ 绑定文档字符串
    __base__ 属性 绑定父类


__slots__ 列表
  限定一个类创建的对象只能有固定的属性(对象没有字典__dict__)


继承 / 派生
    一个父类 <----> 多个子类
    一个子类,只有一个父类的继承关系称为单继承

覆盖 override
  
子类要想调用父类中的被覆盖的方法:
  super(类, 对象)
  super()

子类对象重新实现了 __init__(self, ...)  方法

class B(A):
    def __init__(self, aaa):
        super().__init__(aaa)


day19回顾
  封装
  多态
  继承
多继承
  类的__mro__属性 绑定一系列类的元组
  class A:
      def m():
          pass
  class B(A):
      def m():
          pass
  class C(B):
      def m():
          pass
  c = C()
  super(C, c).m()  # 调用B.m()
  super(B, c).m()  # 调用A.m() 

函数重写
  repr(x)
  str(x)
  int(x)
  float(x)
  complex(x)
  bool(x)
  abs(x)
  len(x)
  iter(x)
  next(x)

迭代器
  __next__(self)


可迭代对象一定有
  __iter__(self)


生成器函数和生成器表达式


