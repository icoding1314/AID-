https://www.cnblogs.com/vamei/archive/2012/07/09/2582499.html
***************************************************************
在“循环”一节，我们已经讨论了Python基本的循环语法。这一节，我们将接触更加灵活的循环方式。
总结
range()
enumerate()
zip()
===============================================================
这一讲的主要目的是为了大家在读Python程序的时候对循环对象有一个基本概念。
	循环对象的并不是随着Python的诞生就存在的，但它的发展迅速，特别是Python 3x的时代，循环对象正在成为循环的标准形式。
循环对象
生成器:G = (x for x in range(4))
表推导:
	xl = [1,3,5]
	yl = [9,12,13]
	L  = [ x**2 for (x,y) in zip(xl,yl) if y > 10]
===============================================================
函数是一个对象

用lambda定义函数
map():re = map((lambda x: x+3),[1,3,5,6])
filter()
reduce()
=================================================================
动态类型：
	引用和对象的分离，对象是内存中储存数据的实体，引用指向对象。
	可变对象，不可变对象
	函数值传递
=====================================================================
range()
	在Python中，for循环后的in跟随一个序列的话，循环每次使用的序列元素，而不是序列的下标。

	之前我们已经使用过range()来控制for循环。现在，我们继续开发range的功能，以实现下标对循环的控制：

	S = 'abcdefghijk'
	for i in range(0,len(S),2):
	    print S[i]
	在该例子中，我们利用len()函数和range()函数，用i作为S序列的下标来控制循环。在range函数中，分别定义上限，下限和每次循环的步长。这就和C语言中的for循环相类似了。
enumerate()
	利用enumerate()函数，可以在每次循环中同时得到下标和元素：

	S = 'abcdefghijk'
	for (index,char) in enumerate(S):
	    print index
	    print char
	实际上，enumerate()在每次循环中，返回的是一个包含两个元素的定值表(tuple)，两个元素分别赋予index和char
zip()
	如果你多个等长的序列，然后想要每次循环时从各个序列分别取出一个元素，可以利用zip()方便地实现：

	ta = [1,2,3]
	tb = [9,8,7]
	tc = ['a','b','c']
	for (a,b,c) in zip(ta,tb,tc):
	    print(a,b,c)
	每次循环时，从各个序列分别从左到右取出一个元素，合并成一个tuple，然后tuple的元素赋予给a,b,c

	zip()函数的功能，就是从多个列表中，依次各取出一个元素。每次取出的(来自不同列表的)元素合成一个元组，合并成的元组放入zip()返回的列表中。zip()函数起到了聚合列表的功能。

	我们可以分解聚合后的列表，如下:

	ta = [1,2,3]
	tb = [9,8,7]

	# cluster
	zipped = zip(ta,tb)
	print(zipped)

	# decompose
	na, nb = zip(*zipped)
	print(na, nb)
什么是循环对象
	循环对象是这样一个对象，它包含有一个next()方法(__next__()方法，在python 3x中)， 这个方法的目的是进行到下一个结果，而在结束一系列结果之后，举出StopIteration错误。

	当一个循环结构（比如for）调用循环对象时，它就会每次循环的时候调用next()方法，直到StopIteration出现，for循环接收到，就知道循环已经结束，停止调用next()。

	假设我们有一个test.txt的文件:

	1234
	abcd
	efg
	我们运行一下python命令行：

	>>>f = open('test.txt')

	>>>f.next()

	>>>f.next()

	...


	不断输入f.next()，直到最后出现StopIteration

	open()返回的实际上是一个循环对象，包含有next()方法。而该next()方法每次返回的就是新的一行的内容，到达文件结尾时举出StopIteration。这样，我们相当于手工进行了循环。

	自动进行的话，就是：

	for line in open('test.txt'):
	    print line
	在这里，for结构自动调用next()方法，将该方法的返回值赋予给line。循环知道出现StopIteration的时候结束。

	 

	相对于序列，用循环对象的好处在于：不用在循环还没有开始的时候，就生成好要使用的元素。所使用的元素可以在循环过程中逐次生成。这样，节省了空间，提高了效率，编程更灵活。
迭代器:

	从技术上来说，循环对象和for循环调用之间还有一个中间层，就是要将循环对象转换成迭代器(iterator)。这一转换是通过使用iter()函数实现的。但从逻辑层面上，常常可以忽略这一层，所以循环对象和迭代器常常相互指代对方。
生成器
	生成器(generator)的主要目的是构成一个用户自定义的循环对象。
	生成器的编写方法和函数定义类似，只是在return的地方改为yield。生成器中可以有多个yield。当生成器遇到一个yield时，会暂停运行生成器，返回yield后面的值。当再次调用生成器的时候，会从刚才暂停的地方继续运行，直到下一个yield。生成器自身又构成一个循环器，每次循环使用一个yield返回的值。

	下面是一个生成器:

	def gen():
	    a = 100
	    yield a
	    a = a*8
	    yield a
	    yield 1000
	该生成器共有三个yield， 如果用作循环器时，会进行三次循环。

	for i in gen():
	    print i
	 

	再考虑如下一个生成器:

	def gen():
	    for i in range(4):
	        yield i
	它又可以写成生成器表达式(Generator Expression):

	G = (x for x in range(4))
	生成器表达式是生成器的一种简便的编写方式。读者可进一步查阅。
表推导
	表推导(list comprehension)是快速生成表的方法。它的语法简单，很有实用价值。

	假设我们生成表L：

	L = []
	for x in range(10):
	    L.append(x**2)
	以上产生了表L，但实际上有快捷的写法，也就是表推导的方式:

	L = [x**2 for x in range(10)]
	这与生成器表达式类似，只不过用的是中括号。

	（表推导的机制实际上是利用循环对象，有兴趣可以查阅。）
秉承着一切皆对象的理念，我们再次回头来看函数(function)。函数也是一个对象，具有属性（可以使用dir()查询）。作为对象，它还可以赋值给其它对象名，或者作为参数传递。
lambda函数
	在展开之前，我们先提一下lambda函数。可以利用lambda函数的语法，定义函数。lambda例子如下：

	func = lambda x,y: x + y
	print func(3,4)
	lambda生成一个函数对象。该函数参数为x,y，返回值为x+y。函数对象赋给func。func的调用与正常函数无异。
	以上定义可以写成以下形式：

	def func(x, y):
	    return x + y
	函数作为参数传递
	函数可以作为一个对象，进行参数传递。函数名(比如func)即该对象。比如说:

	def test(f, a, b):
	    print 'test'
	    print f(a, b)

	test(func, 3, 5)
	test函数的第一个参数f就是一个函数对象。将func传递给f，test中的f()就拥有了func()的功能。
	我们因此可以提高程序的灵活性。可以使用上面的test函数，带入不同的函数参数。比如:
	test((lambda x,y: x**2 + y), 6, 9)
map()函数
	map()是Python的内置函数。它的第一个参数是一个函数对象。

	re = map((lambda x: x+3),[1,3,5,6])
	这里，map()有两个参数，一个是lambda所定义的函数对象，一个是包含有多个元素的表。map()的功能是将函数对象依次作用于表的每一个元素，每次作用的结果储存于返回的表re中。map通过读入的函数(这里是lambda函数)来操作数据（这里“数据”是表中的每一个元素，“操作”是对每个数据加3）。
	在Python 3.X中，map()的返回值是一个循环对象。可以利用list()函数，将该循环对象转换成表。
	如果作为参数的函数对象有多个参数，可使用下面的方式，向map()传递函数参数的多个参数：
	re = map((lambda x,y: x+y),[1,2,3],[6,7,9])
	map()将每次从两个表中分别取出一个元素，带入lambda所定义的函数。
filter()函数
	filter函数的第一个参数也是一个函数对象。它也是将作为参数的函数对象作用于多个元素。如果函数对象返回的是True，则该次的元素被储存于返回的表中。filter通过读入的函数来筛选数据。同样，在Python 3.X中，filter返回的不是表，而是循环对象。
	filter函数的使用如下例:

	def func(a):
		if a > 100:
		    return True
		else:
		    return False
	print filter(func,[10,56,101,500])
reduce()函数
	reduce函数的第一个参数也是函数，但有一个要求，就是这个函数自身能接收两个参数。reduce可以累进地将函数作用于各个参数。如下例：

	print reduce((lambda x,y: x+y),[1,2,5,7,9])
	reduce的第一个参数是lambda函数，它接收两个参数x,y, 返回x+y。

	reduce将表中的前两个元素(1和2)传递给lambda函数，得到3。该返回值(3)将作为lambda函数的第一个参数，而表中的下一个元素(5)作为lambda函数的第二个参数，进行下一次的对lambda函数的调用，得到8。依次调用lambda函数，每次lambda函数的第一个参数是上一次运算结果，而第二个参数为表中的下一个元素，直到表中没有剩余元素。

	上面例子，相当于(((1+2)+5)+7)+9
	根据mmufhy的提醒： reduce()函数在3.0里面不能直接用的，它被定义在了functools包里面，需要引入包，见评论区。


https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html
动态类型：
	1.对象是储存在内存中的实体。但我们并不能直接接触到该对象。我们在程序中写的对象名，只是指向这一对象的引用(reference)。
	2.引用和对象分离，是动态类型的核心。引用可以随时指向一个新的对象：
	3.动态类型(dynamic typing)是Python另一个重要的核心概念。我们之前说过，Python的变量(variable)不需要声明，而在赋值时，变量可以重新赋值为任意值。这些都与动态类型的概念相关。
	4.列表可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为可变数据对象(mutable object)，词典也是这样的数据类型。
	5而像之前的数字和字符串，不能改变对象本身，只能改变引用的指向，称为不可变数据对象(immutable object)。
	6我们之前学的元组(tuple)，尽管可以调用引用元素，但不可以赋值，因此不能改变对象自身，所以也算是immutable object.


**********************************python 的库**********************************************
标准库三个方面的包(package)介绍：

Python增强
系统互动
网络
 

第一类：Python增强
	Python自身的已有的一些功能可以随着标准库的使用而得到增强。

 

	1) 文字处理

		Python的string类提供了对字符串进行处理的方法。更进一步，通过标准库中的re包，Python可以用正则表达式(regular expression)来处理字符串。

		正则表达式是一个字符串模板。Python可以从字符中搜查符合该模板的部分，或者对这一部分替换成其它内容。比如你可以搜索一个文本中所有的数字。正则表达式的关键在于根据自己的需要构成模板。

		此外，Python标准库还为字符串的输出提供更加丰富的格式， 比如： string包，textwrap包。
	 

	2) 数据对象

		不同的数据对象，适用于不同场合的对数据的组织和管理。Python的标准库定义了表和词典之外的数据对象，比如说数组(array)，队列(Queue)。一个熟悉数据结构(data structure)的Python用户可以在这些包中找到自己需要的数据结构。

		此外，我们也会经常使用copy包，以复制对象。

	3) 日期和时间

		日期和时间的管理并不复杂，但容易犯错。Python的标准库中对日期和时间的管理颇为完善（利用time包管理时间，利用datetime包管理日期和时间），你不仅可以进行日期时间的查询和变换（比如：2012年7月18日对应的是星期几），还可以对日期时间进行运算(比如2000.1.1 13:00的378小时之后是什么日期，什么时间)。通过这些标准库，还可以根据需要控制日期时间输出的文本格式(比如：输出’2012-7-18‘还是'18 Jul 2012')

	 

	4) 数学运算

		标准库中，Python定义了一些新的数字类型(decimal包, fractions包), 以弥补之前的数字类型(integer, float)可能的不足。标准库还包含了random包，用于处理随机数相关的功能（产生随机数，随机取样等）。math包补充了一些重要的数学常数和数学函数，比如pi，三角函数等等。

		(尽管numpy并不是标准库中的包，但它的数组运算的良好支持，让它在基于Python的科研和计算方面得到相当广泛的应用，可以适当关注。)

	5) 存储

		之前我们的快速教程中，只提及了文本的输入和输出。实际上，Python可以输入或输出任意的对象。这些对象可以通过标准库中的pickle包转换成为二进制格式(binary)，然后存储于文件之中，也可以反向从二进制文件中读取对象。

		此外，标准库中还支持基本的数据库功能(sqlite3包)。XML和csv格式的文件也有相应的处理包。
		　　

第二类：系统互动
	系统互动，主要指Python和操作系统(operate system)、文件系统(file system)的互动。Python可以实现一个操作系统的许多功能。它能够像bash脚本那样管理操作系统，这也是Python有时被成为脚本语言的原因。

	1) Python运行控制

		sys包被用于管理Python自身的运行环境。Python是一个解释器(interpreter), 也是一个运行在操作系统上的程序。我们可以用sys包来控制这一程序运行的许多参数，比如说Python运行所能占据的内存和CPU， Python所要扫描的路径等。另一个重要功能是和Python自己的命令行互动，从命令行读取命令和参数。

	2) 操作系统

		如果说Python构成了一个小的世界，那么操作系统就是包围这个小世界的大世界。Python与操作系统的互动可以让Python在自己的小世界里管理整个大世界。

		os包是Python与操作系统的接口。我们可以用os包来实现操作系统的许多功能，比如管理系统进程，改变当前路径(相当于’cd‘)，改变文件权限等，建立。但要注意，os包是建立在操作系统的平台上的，许多功能在Windows系统上是无法实现的。另外，在使用os包中，要注意其中的有些功能已经被其他的包取代。

		我们通过文件系统来管理磁盘上储存的文件。查找、删除，复制文件，以及列出文件列表等都是常见的文件操作。这些功能经常可以在操作系统中看到（比如ls, mv, cp等Linux命令），但现在可以通过Python标准库中的glob包、shutil包、os.path包、以及os包的一些函数等，在Python内部实现。

		subprocess包被用于执行外部命令，其功能相当于我们在操作系统的命令行中输入命令以执行，比如常见的系统命令'ls'或者'cd'，还可以是任意可以在命令行中执行的程序。

	4) 线程与进程

		Python支持多线程(threading包)运行和多进程(multiprocessing包)运行。通过多线程和多进程，可以提高系统资源的利用率，提高计算机的处理速度。Python在这些包中，附带有相关的通信和内存管理工具。此外，Python还支持类似于UNIX的signal系统，以实现进程之间的粗糙的信号通信。
 
第三类：网络
		现在，网络功能的强弱很大程度上决定了一个语言的成功与否。从Ruby, JavaScript, php身上都可以感受到这一点。Python的标准库对互联网开发的支持并不充分，这也是Django等基于Python的项目的出发点: 增强Python在网络方面的应用功能。这些项目取得了很大的成功，也是许多人愿意来学习Python的一大原因。但应注意到，这些基于Python的项目也是建立在Python标准库的基础上的。

	1) 基于socket层的网络应用

		socket是网络可编程部分的底层。通过socket包，我们可以直接管理socket，比如说将socket赋予给某个端口(port)，连接远程端口，以及通过连接传输数据。我们也可以利用SocketServer包更方便地建立服务器。

		通过与多线程和多进程配合，建立多线程或者多进程的服务器，可以有效提高服务器的工作能力。此外，通过asyncore包实现异步处理，也是改善服务器性能的一个方案。

	2) 互联网应用

		在实际应用中，网络的很多底层细节（比如socket）都是被高层的协议隐藏起来的。建立在socket之上的http协议实际上更容易也更经常被使用。http通过request/responce的模式建立连接并进行通信，其信息内容也更容易理解。Python标准库中有http的服务器端和客户端的应用支持(BaseHTTPServer包; urllib包, urllib2包), 并且可以通过urlparse包对URL（URL实际上说明了网络资源所在的位置）进行理解和操作。

	 

https://www.cnblogs.com/vamei/archive/2012/09/05/2672039.html
https://www.cnblogs.com/vamei/archive/2012/09/05/2671198.html
https://www.cnblogs.com/vamei/archive/2012/09/14/2684775.html
总结
文件系统
os.path
glob.glob


总结
os包: rmdir, mkdir, listdir, remove, rename, chmod, chown, stat, symlink

shutil包: copy, move



os.path包
	os.path包主要是处理路径字符串，比如说'/home/vamei/doc/file.txt'，提取出有用信息。

	import os.path
	path = '/home/vamei/doc/file.txt'

	print(os.path.basename(path))    # 查询路径中包含的文件名
	print(os.path.dirname(path))     # 查询路径中包含的目录

	info = os.path.split(path)       # 将路径分割成文件名和目录两个部分，放在一个表中返回
	path2 = os.path.join('/', 'home', 'vamei', 'doc', 'file1.txt')  # 使用目录名和文件名构成一个路径字符串

	p_list = [path, path2]
	print(os.path.commonprefix(p_list))    # 查询多个路径的共同部分
	此外，还有下面的方法：

	os.path.normpath(path)   # 去除路径path中的冗余。比如'/home/vamei/../.'被转化为'/home'

	 

	os.path还可以查询文件的相关信息(metadata)。文件的相关信息不存储在文件内部，而是由操作系统维护的，关于文件的一些信息(比如文件类型，大小，修改时间)。

		import os.path 
		path = '/home/vamei/doc/file.txt'

		print(os.path.exists(path))    # 查询文件是否存在

		print(os.path.getsize(path))   # 查询文件大小
		print(os.path.getatime(path))  # 查询文件上一次读取的时间
		print(os.path.getmtime(path))  # 查询文件上一次修改的时间

		print(os.path.isfile(path))    # 路径是否指向常规文件
		print(os.path.isdir(path))     # 路径是否指向目录文件
		 (实际上，这一部份类似于Linux中的ls命令的某些功能)


os包 
	os包包括各种各样的函数，以实现操作系统的许多功能。这个包非常庞杂。os包的一些命令就是用于文件管理。我们这里列出最常用的:

	mkdir(path)

	创建新目录，path为一个字符串，表示新目录的路径。相当于$mkdir命令

	rmdir(path)

	删除空的目录，path为一个字符串，表示想要删除的目录的路径。相当于$rmdir命令

	listdir(path)

	返回目录中所有文件。相当于$ls命令。

	 

	remove(path)

	删除path指向的文件。

	rename(src, dst)

	重命名文件，src和dst为两个路径，分别表示重命名之前和之后的路径。 

	 

	chmod(path, mode)

	改变path指向的文件的权限。相当于$chmod命令。

	chown(path, uid, gid)

	改变path所指向文件的拥有者和拥有组。相当于$chown命令。

	stat(path)

	查看path所指向文件的附加信息，相当于$ls -l命令。

	symlink(src, dst)

	为文件dst创建软链接，src为软链接文件的路径。相当于$ln -s命令。

	 

	getcwd()

	查询当前工作路径 (cwd, current working directory)，相当于$pwd命令。

	 

	比如说我们要新建目录new：

	import os
	os.mkdir('/home/vamei/new')
 

shutil包
	copy(src, dst)

	复制文件，从src到dst。相当于$cp命令。

	move(src, dst)

	移动文件，从src到dst。相当于$mv命令。

	 

	比如我们想复制文件a.txt:

	import shutil
	shutil.copy('a.txt', 'b.txt')
	 

	想深入细节，请参照官方文档os, shutil。

	结合本章以及之前的内容，我们把Python打造成一个文件管理的利器了。

 


glob包
	glob包最常用的方法只有一个, glob.glob()。该方法的功能与Linux中的ls相似(参看Linux文件管理命令)，接受一个Linux式的文件名格式表达式(filename pattern expression)，列出所有符合该表达式的文件（与正则表达式类似），将所有文件名放在一个表中返回。所以glob.glob()是一个查询目录下文件的好方法。

	该文件名表达式的语法与Python自身的正则表达式不同 (你可以同时看一下fnmatch包，它的功能是检测一个文件名是否符合Linux的文件名格式表达式)。 如下：

	Filename Pattern Expression      Python Regular Expression

	*                                .*

	?                                .

	[0-9]                            same

	[a-e]                            same

	[^mnp]                           same

	 

	我们可以用该命令找出/home/vamei下的所有文件:

	import glob
	print(glob.glob('/home/vamei/*'))
	 
https://www.cnblogs.com/vamei/archive/2012/09/10/2676740.html  # 关于Linux的shell的命令
https://www.cnblogs.com/vamei/archive/2012/09/19/2692452.html  # 冠以Linux的架构


https://www.cnblogs.com/vamei/archive/2012/09/15/2684781.html
总结
	对象 -> 文本 -> 文件

	pickle.dump(), pickle.load(), cPickle
pickle包
	对于上述过程，最常用的工具是Python中的pickle包。

	1) 将内存中的对象转换成为文本流：

	import pickle

	# define class
	class Bird(object):
	    have_feather = True
	    way_of_reproduction  = 'egg'

	summer       = Bird()                 # construct an object
	picklestring = pickle.dumps(summer)   # serialize object
	使用pickle.dumps()方法可以将对象summer转换成了字符串 picklestring(也就是文本流)。随后我们可以用普通文本的存储方法来将该字符串储存在文件(文本文件的输入输出)。

	 

	当然，我们也可以使用pickle.dump()的方法，将上面两部合二为一:

	import pickle

	# define class
	class Bird(object):
	    have_feather = True
	    way_of_reproduction  = 'egg'

	summer       = Bird()                        # construct an object
	fn           = 'a.pkl'
	with open(fn, 'w') as f:                     # open file with write-mode
	    picklestring = pickle.dump(summer, f)   # serialize and save object
	对象summer存储在文件a.pkl

	 

	2) 重建对象

	首先，我们要从文本中读出文本，存储到字符串 (文本文件的输入输出)。然后使用pickle.loads(str)的方法，将字符串转换成为对象。要记得，此时我们的程序中必须已经有了该对象的类定义。

	 

	此外，我们也可以使用pickle.load()的方法，将上面步骤合并:

	import pickle

	# define the class before unpickle
	class Bird(object):
	    have_feather = True
	    way_of_reproduction  = 'egg'

	fn     = 'a.pkl'
	with open(fn, 'r') as f:
	    summer = pickle.load(f)   # read file and build object
 

 

cPickle包
	cPickle包的功能和用法与pickle包几乎完全相同 (其存在差别的地方实际上很少用到)，不同在于cPickle是基于c语言编写的，速度是pickle包的1000倍。对于上面的例子，如果想使用cPickle包，我们都可以将import语句改为:

	import cPickle as pickle
	就不需要再做任何改动了。

	 
